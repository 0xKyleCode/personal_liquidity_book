{
  "address": "0xFBf15b55CC4059cD276b92C5012EF81eBF7d03f6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_binOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_centerOffset",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "activeBins",
          "type": "uint256[]"
        }
      ],
      "name": "_checkMinMaxActiveBins",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minBin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBin",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "binOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "centerOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasCaller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTokenXWeighted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTokenYWeighted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manualRebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_binOffset",
          "type": "uint256"
        }
      ],
      "name": "setBinOffset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_centerOffset",
          "type": "uint256"
        }
      ],
      "name": "setCenterOffset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "setPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb522f7f0ddab151b9efc3fc0da7affc5564dfcc1c2cf15fecc03b7560b3699f",
  "receipt": {
    "to": null,
    "from": "0xBE15BC0A3e37F1A3445DEfb4F0FF6eba0E4F19E2",
    "contractAddress": "0xFBf15b55CC4059cD276b92C5012EF81eBF7d03f6",
    "transactionIndex": 1,
    "gasUsed": "1297425",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000001000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000010000000080000000000000000000000000000000000000000000000000000000000000000000000000000000008020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x16b7fe92eb90f0d277cc7ee84e961a53bce3ccded80798a6a8056bf12024a649",
    "transactionHash": "0xeb522f7f0ddab151b9efc3fc0da7affc5564dfcc1c2cf15fecc03b7560b3699f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 26695654,
        "transactionHash": "0xeb522f7f0ddab151b9efc3fc0da7affc5564dfcc1c2cf15fecc03b7560b3699f",
        "address": "0xFBf15b55CC4059cD276b92C5012EF81eBF7d03f6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000be15bc0a3e37f1a3445defb4f0ff6eba0e4f19e2"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x16b7fe92eb90f0d277cc7ee84e961a53bce3ccded80798a6a8056bf12024a649"
      }
    ],
    "blockNumber": 26695654,
    "cumulativeGasUsed": "1419971",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd44317158Ce7DfFFB87E59442777b88eBA901888",
    1,
    5
  ],
  "numDeployments": 1,
  "solcInputHash": "b51c85b2a0d89b6c122af7f8ed7f2234",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_binOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_centerOffset\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"activeBins\",\"type\":\"uint256[]\"}],\"name\":\"_checkMinMaxActiveBins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minBin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBin\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"binOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"centerOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTokenXWeighted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTokenYWeighted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_binOffset\",\"type\":\"uint256\"}],\"name\":\"setBinOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_centerOffset\",\"type\":\"uint256\"}],\"name\":\"setCenterOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SteakHut Finance\",\"kind\":\"dev\",\"methods\":{\"inCaseTokensGetStuck(address)\":{\"params\":{\"_token\":\"address of the token to rescue.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBinOffset(uint256)\":{\"params\":{\"_binOffset\":\"new bin offset.\"}},\"setCenterOffset(uint256)\":{\"params\":{\"_centerOffset\":\"new center offset.\"}},\"setPeriod(uint256)\":{\"params\":{\"_period\":\"new minimum period.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"LBActiveStratManager V2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_checkMinMaxActiveBins(uint256[])\":{\"notice\":\"returns the minimum and maximum bin currently used by the underlying strategy\"},\"checkUpkeep(bytes)\":{\"notice\":\"Chainlink Check Upkeep Functionchecks to moves liquidity around the active bin once binOffset is achievedchecks if enough time has passed to perform a harvest only\"},\"constructor\":{\"notice\":\"----------------------------------------------------------- Constructor -----------------------------------------------------------\"},\"inCaseTokensGetStuck(address)\":{\"notice\":\"Rescues funds stuck\"},\"manualRebalance()\":{\"notice\":\"manual rebalance underlying position\"},\"performUpkeep(bytes)\":{\"notice\":\"Chainlink Perform Upkeep Functionmoves liquidity around the active bin once binOffset is achievedharvest if enough time has passed to perform a harvest only\"},\"setBinOffset(uint256)\":{\"notice\":\"Updates binOffset\"},\"setCenterOffset(uint256)\":{\"notice\":\"Updates centerOffset\"},\"setPeriod(uint256)\":{\"notice\":\"Updates the minimum period between harvests\"}},\"notice\":\"contract to enable rebalances of the underlying strategy using existing parametersthis strategy will chase an active bin once it goes within x number bins of current rangethis strategy will also perform a rebalance once it becomes one sided\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/automator/LBActiveManagerV2.sol\":\"LBActiveStratManagerActiveV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/LB/LBErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/ILBPair.sol\\\";\\n\\n/** LBRouter errors */\\n\\nerror LBRouter__SenderIsNotWAVAX();\\nerror LBRouter__PairNotCreated(address tokenX, address tokenY, uint256 binStep);\\nerror LBRouter__WrongAmounts(uint256 amount, uint256 reserve);\\nerror LBRouter__SwapOverflows(uint256 id);\\nerror LBRouter__BrokenSwapSafetyCheck();\\nerror LBRouter__NotFactoryOwner();\\nerror LBRouter__TooMuchTokensIn(uint256 excess);\\nerror LBRouter__BinReserveOverflows(uint256 id);\\nerror LBRouter__IdOverflows(int256 id);\\nerror LBRouter__LengthsMismatch();\\nerror LBRouter__WrongTokenOrder();\\nerror LBRouter__IdSlippageCaught(uint256 activeIdDesired, uint256 idSlippage, uint256 activeId);\\nerror LBRouter__AmountSlippageCaught(uint256 amountXMin, uint256 amountX, uint256 amountYMin, uint256 amountY);\\nerror LBRouter__IdDesiredOverflows(uint256 idDesired, uint256 idSlippage);\\nerror LBRouter__FailedToSendAVAX(address recipient, uint256 amount);\\nerror LBRouter__DeadlineExceeded(uint256 deadline, uint256 currentTimestamp);\\nerror LBRouter__AmountSlippageBPTooBig(uint256 amountSlippage);\\nerror LBRouter__InsufficientAmountOut(uint256 amountOutMin, uint256 amountOut);\\nerror LBRouter__MaxAmountInExceeded(uint256 amountInMax, uint256 amountIn);\\nerror LBRouter__InvalidTokenPath(address wrongToken);\\nerror LBRouter__InvalidVersion(uint256 version);\\nerror LBRouter__WrongAvaxLiquidityParameters(\\n    address tokenX,\\n    address tokenY,\\n    uint256 amountX,\\n    uint256 amountY,\\n    uint256 msgValue\\n);\\n\\n/** LBToken errors */\\n\\nerror LBToken__SpenderNotApproved(address owner, address spender);\\nerror LBToken__TransferFromOrToAddress0();\\nerror LBToken__MintToAddress0();\\nerror LBToken__BurnFromAddress0();\\nerror LBToken__BurnExceedsBalance(address from, uint256 id, uint256 amount);\\nerror LBToken__LengthMismatch(uint256 accountsLength, uint256 idsLength);\\nerror LBToken__SelfApproval(address owner);\\nerror LBToken__TransferExceedsBalance(address from, uint256 id, uint256 amount);\\nerror LBToken__TransferToSelf();\\n\\n/** LBFactory errors */\\n\\nerror LBFactory__IdenticalAddresses(IERC20 token);\\nerror LBFactory__QuoteAssetNotWhitelisted(IERC20 quoteAsset);\\nerror LBFactory__QuoteAssetAlreadyWhitelisted(IERC20 quoteAsset);\\nerror LBFactory__AddressZero();\\nerror LBFactory__LBPairAlreadyExists(IERC20 tokenX, IERC20 tokenY, uint256 _binStep);\\nerror LBFactory__LBPairNotCreated(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\nerror LBFactory__DecreasingPeriods(uint16 filterPeriod, uint16 decayPeriod);\\nerror LBFactory__ReductionFactorOverflows(uint16 reductionFactor, uint256 max);\\nerror LBFactory__VariableFeeControlOverflows(uint16 variableFeeControl, uint256 max);\\nerror LBFactory__BaseFeesBelowMin(uint256 baseFees, uint256 minBaseFees);\\nerror LBFactory__FeesAboveMax(uint256 fees, uint256 maxFees);\\nerror LBFactory__FlashLoanFeeAboveMax(uint256 fees, uint256 maxFees);\\nerror LBFactory__BinStepRequirementsBreached(uint256 lowerBound, uint16 binStep, uint256 higherBound);\\nerror LBFactory__ProtocolShareOverflows(uint16 protocolShare, uint256 max);\\nerror LBFactory__FunctionIsLockedForUsers(address user);\\nerror LBFactory__FactoryLockIsAlreadyInTheSameState();\\nerror LBFactory__LBPairIgnoredIsAlreadyInTheSameState();\\nerror LBFactory__BinStepHasNoPreset(uint256 binStep);\\nerror LBFactory__SameFeeRecipient(address feeRecipient);\\nerror LBFactory__SameFlashLoanFee(uint256 flashLoanFee);\\nerror LBFactory__LBPairSafetyCheckFailed(address LBPairImplementation);\\nerror LBFactory__SameImplementation(address LBPairImplementation);\\nerror LBFactory__ImplementationNotSet();\\n\\n/** LBPair errors */\\n\\nerror LBPair__InsufficientAmounts();\\nerror LBPair__AddressZero();\\nerror LBPair__AddressZeroOrThis();\\nerror LBPair__CompositionFactorFlawed(uint256 id);\\nerror LBPair__InsufficientLiquidityMinted(uint256 id);\\nerror LBPair__InsufficientLiquidityBurned(uint256 id);\\nerror LBPair__WrongLengths();\\nerror LBPair__OnlyStrictlyIncreasingId();\\nerror LBPair__OnlyFactory();\\nerror LBPair__DistributionsOverflow();\\nerror LBPair__OnlyFeeRecipient(address feeRecipient, address sender);\\nerror LBPair__OracleNotEnoughSample();\\nerror LBPair__AlreadyInitialized();\\nerror LBPair__OracleNewSizeTooSmall(uint256 newSize, uint256 oracleSize);\\nerror LBPair__FlashLoanCallbackFailed();\\nerror LBPair__FlashLoanInvalidBalance();\\nerror LBPair__FlashLoanInvalidToken();\\n\\n/** BinHelper errors */\\n\\nerror BinHelper__BinStepOverflows(uint256 bp);\\nerror BinHelper__IdOverflows();\\n\\n/** Math128x128 errors */\\n\\nerror Math128x128__PowerUnderflow(uint256 x, int256 y);\\nerror Math128x128__LogUnderflow();\\n\\n/** Math512Bits errors */\\n\\nerror Math512Bits__MulDivOverflow(uint256 prod1, uint256 denominator);\\nerror Math512Bits__ShiftDivOverflow(uint256 prod1, uint256 denominator);\\nerror Math512Bits__MulShiftOverflow(uint256 prod1, uint256 offset);\\nerror Math512Bits__OffsetOverflows(uint256 offset);\\n\\n/** Oracle errors */\\n\\nerror Oracle__AlreadyInitialized(uint256 _index);\\nerror Oracle__LookUpTimestampTooOld(uint256 _minTimestamp, uint256 _lookUpTimestamp);\\nerror Oracle__NotInitialized();\\n\\n/** PendingOwnable errors */\\n\\nerror PendingOwnable__NotOwner();\\nerror PendingOwnable__NotPendingOwner();\\nerror PendingOwnable__PendingOwnerAlreadySet();\\nerror PendingOwnable__NoPendingOwner();\\nerror PendingOwnable__AddressZero();\\n\\n/** ReentrancyGuardUpgradeable errors */\\n\\nerror ReentrancyGuardUpgradeable__ReentrantCall();\\nerror ReentrancyGuardUpgradeable__AlreadyInitialized();\\n\\n/** SafeCast errors */\\n\\nerror SafeCast__Exceeds256Bits(uint256 x);\\nerror SafeCast__Exceeds248Bits(uint256 x);\\nerror SafeCast__Exceeds240Bits(uint256 x);\\nerror SafeCast__Exceeds232Bits(uint256 x);\\nerror SafeCast__Exceeds224Bits(uint256 x);\\nerror SafeCast__Exceeds216Bits(uint256 x);\\nerror SafeCast__Exceeds208Bits(uint256 x);\\nerror SafeCast__Exceeds200Bits(uint256 x);\\nerror SafeCast__Exceeds192Bits(uint256 x);\\nerror SafeCast__Exceeds184Bits(uint256 x);\\nerror SafeCast__Exceeds176Bits(uint256 x);\\nerror SafeCast__Exceeds168Bits(uint256 x);\\nerror SafeCast__Exceeds160Bits(uint256 x);\\nerror SafeCast__Exceeds152Bits(uint256 x);\\nerror SafeCast__Exceeds144Bits(uint256 x);\\nerror SafeCast__Exceeds136Bits(uint256 x);\\nerror SafeCast__Exceeds128Bits(uint256 x);\\nerror SafeCast__Exceeds120Bits(uint256 x);\\nerror SafeCast__Exceeds112Bits(uint256 x);\\nerror SafeCast__Exceeds104Bits(uint256 x);\\nerror SafeCast__Exceeds96Bits(uint256 x);\\nerror SafeCast__Exceeds88Bits(uint256 x);\\nerror SafeCast__Exceeds80Bits(uint256 x);\\nerror SafeCast__Exceeds72Bits(uint256 x);\\nerror SafeCast__Exceeds64Bits(uint256 x);\\nerror SafeCast__Exceeds56Bits(uint256 x);\\nerror SafeCast__Exceeds48Bits(uint256 x);\\nerror SafeCast__Exceeds40Bits(uint256 x);\\nerror SafeCast__Exceeds32Bits(uint256 x);\\nerror SafeCast__Exceeds24Bits(uint256 x);\\nerror SafeCast__Exceeds16Bits(uint256 x);\\nerror SafeCast__Exceeds8Bits(uint256 x);\\n\\n/** TreeMath errors */\\n\\nerror TreeMath__ErrorDepthSearch();\\n\\n/** JoeLibrary errors */\\n\\nerror JoeLibrary__IdenticalAddresses();\\nerror JoeLibrary__AddressZero();\\nerror JoeLibrary__InsufficientAmount();\\nerror JoeLibrary__InsufficientLiquidity();\\n\\n/** TokenHelper errors */\\n\\nerror TokenHelper__NonContract();\\nerror TokenHelper__CallFailed();\\nerror TokenHelper__TransferFailed();\\n\\n/** LBQuoter errors */\\n\\nerror LBQuoter_InvalidLength();\",\"keccak256\":\"0xf286f93d0be2d9f44dcf074cd491d95c8e7ef5b8698cdb7c1b142ab60869e365\",\"license\":\"MIT\"},\"contracts/LB/interfaces/ILBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./ILBPair.sol\\\";\\nimport \\\"./IPendingOwnable.sol\\\";\\n\\n/// @title Liquidity Book Factory Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBFactory contract\\ninterface ILBFactory is IPendingOwnable {\\n    /// @dev Structure to store the LBPair information, such as:\\n    /// - binStep: The bin step of the LBPair\\n    /// - LBPair: The address of the LBPair\\n    /// - createdByOwner: Whether the pair was created by the owner of the factory\\n    /// - ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n}\",\"keccak256\":\"0x483974bedf0a6b3cb5dac3b4b953b5f2520fa5772854593922ce81dfd0abe70c\",\"license\":\"MIT\"},\"contracts/LB/interfaces/ILBFlashLoanCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Liquidity Book Flashloan Callback Interface\\n/// @author Trader Joe\\n/// @notice Required interface to interact with LB flash loans\\ninterface ILBFlashLoanCallback {\\n    function LBFlashLoanCallback(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\",\"keccak256\":\"0x7ae96dfc12e2eb70ef473e29a257f537f1202a22fd9555a785729db43c6462a3\",\"license\":\"MIT\"},\"contracts/LB/interfaces/ILBPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../libraries/FeeHelper.sol\\\";\\nimport \\\"./ILBFactory.sol\\\";\\nimport \\\"./ILBFlashLoanCallback.sol\\\";\\n\\n/// @title Liquidity Book Pair Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBPair contract\\ninterface ILBPair {\\n    /// @dev Structure to store the reserves of bins:\\n    /// - reserveX: The current reserve of tokenX of the bin\\n    /// - reserveY: The current reserve of tokenY of the bin\\n    struct Bin {\\n        uint112 reserveX;\\n        uint112 reserveY;\\n        uint256 accTokenXPerShare;\\n        uint256 accTokenYPerShare;\\n    }\\n\\n    /// @dev Structure to store the information of the pair such as:\\n    /// slot0:\\n    /// - activeId: The current id used for swaps, this is also linked with the price\\n    /// - reserveX: The sum of amounts of tokenX across all bins\\n    /// slot1:\\n    /// - reserveY: The sum of amounts of tokenY across all bins\\n    /// - oracleSampleLifetime: The lifetime of an oracle sample\\n    /// - oracleSize: The current size of the oracle, can be increase by users\\n    /// - oracleActiveSize: The current active size of the oracle, composed only from non empty data sample\\n    /// - oracleLastTimestamp: The current last timestamp at which a sample was added to the circular buffer\\n    /// - oracleId: The current id of the oracle\\n    /// slot2:\\n    /// - feesX: The current amount of fees to distribute in tokenX (total, protocol)\\n    /// slot3:\\n    /// - feesY: The current amount of fees to distribute in tokenY (total, protocol)\\n    struct PairInformation {\\n        uint24 activeId;\\n        uint136 reserveX;\\n        uint136 reserveY;\\n        uint16 oracleSampleLifetime;\\n        uint16 oracleSize;\\n        uint16 oracleActiveSize;\\n        uint40 oracleLastTimestamp;\\n        uint16 oracleId;\\n        FeeHelper.FeesDistribution feesX;\\n        FeeHelper.FeesDistribution feesY;\\n    }\\n\\n    /// @dev Structure to store the debts of users\\n    /// - debtX: The tokenX's debt\\n    /// - debtY: The tokenY's debt\\n    struct Debts {\\n        uint256 debtX;\\n        uint256 debtY;\\n    }\\n\\n    /// @dev Structure to store fees:\\n    /// - tokenX: The amount of fees of token X\\n    /// - tokenY: The amount of fees of token Y\\n    struct Fees {\\n        uint128 tokenX;\\n        uint128 tokenY;\\n    }\\n\\n    /// @dev Structure to minting informations:\\n    /// - amountXIn: The amount of token X sent\\n    /// - amountYIn: The amount of token Y sent\\n    /// - amountXAddedToPair: The amount of token X that have been actually added to the pair\\n    /// - amountYAddedToPair: The amount of token Y that have been actually added to the pair\\n    /// - activeFeeX: Fees X currently generated\\n    /// - activeFeeY: Fees Y currently generated\\n    /// - totalDistributionX: Total distribution of token X. Should be 1e18 (100%) or 0 (0%)\\n    /// - totalDistributionY: Total distribution of token Y. Should be 1e18 (100%) or 0 (0%)\\n    /// - id: Id of the current working bin when looping on the distribution array\\n    /// - amountX: The amount of token X deposited in the current bin\\n    /// - amountY: The amount of token Y deposited in the current bin\\n    /// - distributionX: Distribution of token X for the current working bin\\n    /// - distributionY: Distribution of token Y for the current working bin\\n    struct MintInfo {\\n        uint256 amountXIn;\\n        uint256 amountYIn;\\n        uint256 amountXAddedToPair;\\n        uint256 amountYAddedToPair;\\n        uint256 activeFeeX;\\n        uint256 activeFeeY;\\n        uint256 totalDistributionX;\\n        uint256 totalDistributionY;\\n        uint256 id;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 distributionX;\\n        uint256 distributionY;\\n    }\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        bool swapForY,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 volatilityAccumulated,\\n        uint256 fees\\n    );\\n\\n    event FlashLoan(\\n        address indexed sender,\\n        ILBFlashLoanCallback indexed receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    event CompositionFee(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        uint256 feesX,\\n        uint256 feesY\\n    );\\n\\n    event DepositedToBin(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    event WithdrawnFromBin(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    event FeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event ProtocolFeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event OracleSizeIncreased(uint256 previousSize, uint256 newSize);\\n\\n    function tokenX() external view returns (IERC20);\\n\\n    function tokenY() external view returns (IERC20);\\n\\n    function factory() external view returns (ILBFactory);\\n\\n    function getReservesAndId()\\n        external\\n        view\\n        returns (\\n            uint256 reserveX,\\n            uint256 reserveY,\\n            uint256 activeId\\n        );\\n\\n    function getGlobalFees()\\n        external\\n        view\\n        returns (\\n            uint128 feesXTotal,\\n            uint128 feesYTotal,\\n            uint128 feesXProtocol,\\n            uint128 feesYProtocol\\n        );\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (\\n            uint256 oracleSampleLifetime,\\n            uint256 oracleSize,\\n            uint256 oracleActiveSize,\\n            uint256 oracleLastTimestamp,\\n            uint256 oracleId,\\n            uint256 min,\\n            uint256 max\\n        );\\n\\n    function getOracleSampleFrom(uint256 timeDelta)\\n        external\\n        view\\n        returns (\\n            uint256 cumulativeId,\\n            uint256 cumulativeAccumulator,\\n            uint256 cumulativeBinCrossed\\n        );\\n\\n    function feeParameters() external view returns (FeeHelper.FeeParameters memory);\\n\\n    function findFirstNonEmptyBinId(uint24 id_, bool sentTokenY) external view returns (uint24 id);\\n\\n    function getBin(uint24 id) external view returns (uint256 reserveX, uint256 reserveY);\\n\\n    function pendingFees(address account, uint256[] memory ids)\\n        external\\n        view\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function swap(bool sentTokenY, address to) external returns (uint256 amountXOut, uint256 amountYOut);\\n\\n    function flashLoan(\\n        ILBFlashLoanCallback receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mint(\\n        uint256[] calldata ids,\\n        uint256[] calldata distributionX,\\n        uint256[] calldata distributionY,\\n        address to\\n    )\\n        external\\n        returns (\\n            uint256 amountXAddedToPair,\\n            uint256 amountYAddedToPair,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function burn(\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        address to\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function increaseOracleLength(uint16 newSize) external;\\n\\n    function collectFees(address account, uint256[] calldata ids) external returns (uint256 amountX, uint256 amountY);\\n\\n    function collectProtocolFees() external returns (uint128 amountX, uint128 amountY);\\n\\n    function setFeesParameters(bytes32 packedFeeParameters) external;\\n\\n    function forceDecay() external;\\n\\n    function initialize(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint24 activeId,\\n        uint16 sampleLifetime,\\n        bytes32 packedFeeParameters\\n    ) external;\\n}\",\"keccak256\":\"0x4e664df355fa6ccf99dd5bcad1c4cf67b37cd5e8a810c76e8f78fd54da7d8cf8\",\"license\":\"MIT\"},\"contracts/LB/interfaces/IPendingOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title Liquidity Book Pending Ownable Interface\\n/// @author Trader Joe\\n/// @notice Required interface of Pending Ownable contract used for LBFactory\\ninterface IPendingOwnable {\\n    event PendingOwnerSet(address indexed pendingOwner);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\",\"keccak256\":\"0xb9ba5f574dd5269931e67bab2c34125c803ed1c4908a79ea86d7e6394aa8db73\",\"license\":\"MIT\"},\"contracts/LB/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title Liquidity Book Constants Library\\n/// @author Trader Joe\\n/// @notice Set of constants for Liquidity Book contracts\\nlibrary Constants {\\n    uint256 internal constant SCALE_OFFSET = 128;\\n    uint256 internal constant SCALE = 1 << SCALE_OFFSET;\\n\\n    uint256 internal constant PRECISION = 1e18;\\n    uint256 internal constant BASIS_POINT_MAX = 10_000;\\n\\n    /// @dev The expected return after a successful flash loan\\n    bytes32 internal constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n}\",\"keccak256\":\"0x5c62462c525872087001378db2d8f79428e816255960f26cf3bc9c38bec7b18c\",\"license\":\"MIT\"},\"contracts/LB/libraries/FeeHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/// @title Liquidity Book Fee Helper Library\\n/// @author Trader Joe\\n/// @notice Helper contract used for fees calculation\\nlibrary FeeHelper {\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n\\n    /// @dev Structure to store the protocol fees:\\n    /// - binStep: The bin step\\n    /// - baseFactor: The base factor\\n    /// - filterPeriod: The filter period, where the fees stays constant\\n    /// - decayPeriod: The decay period, where the fees are halved\\n    /// - reductionFactor: The reduction factor, used to calculate the reduction of the accumulator\\n    /// - variableFeeControl: The variable fee control, used to control the variable fee, can be 0 to disable them\\n    /// - protocolShare: The share of fees sent to protocol\\n    /// - maxVolatilityAccumulated: The max value of volatility accumulated\\n    /// - volatilityAccumulated: The value of volatility accumulated\\n    /// - volatilityReference: The value of volatility reference\\n    /// - indexRef: The index reference\\n    /// - time: The last time the accumulator was called\\n    struct FeeParameters {\\n        // 144 lowest bits in slot\\n        uint16 binStep;\\n        uint16 baseFactor;\\n        uint16 filterPeriod;\\n        uint16 decayPeriod;\\n        uint16 reductionFactor;\\n        uint24 variableFeeControl;\\n        uint16 protocolShare;\\n        uint24 maxVolatilityAccumulated;\\n        // 112 highest bits in slot\\n        uint24 volatilityAccumulated;\\n        uint24 volatilityReference;\\n        uint24 indexRef;\\n        uint40 time;\\n    }\\n\\n    /// @dev Structure used during swaps to distributes the fees:\\n    /// - total: The total amount of fees\\n    /// - protocol: The amount of fees reserved for protocol\\n    struct FeesDistribution {\\n        uint128 total;\\n        uint128 protocol;\\n    }\\n\\n    /// @notice Update the value of the volatility accumulated\\n    /// @param _fp The current fee parameters\\n    /// @param _activeId The current active id\\n    function updateVariableFeeParameters(FeeParameters memory _fp, uint256 _activeId) internal view {\\n        uint256 _deltaT = block.timestamp - _fp.time;\\n\\n        if (_deltaT >= _fp.filterPeriod || _fp.time == 0) {\\n            _fp.indexRef = uint24(_activeId);\\n            if (_deltaT < _fp.decayPeriod) {\\n                unchecked {\\n                    // This can't overflow as `reductionFactor <= BASIS_POINT_MAX`\\n                    _fp.volatilityReference = uint24(\\n                        (uint256(_fp.reductionFactor) * _fp.volatilityAccumulated) / Constants.BASIS_POINT_MAX\\n                    );\\n                }\\n            } else {\\n                _fp.volatilityReference = 0;\\n            }\\n        }\\n\\n        _fp.time = (block.timestamp).safe40();\\n\\n        updateVolatilityAccumulated(_fp, _activeId);\\n    }\\n\\n    /// @notice Update the volatility accumulated\\n    /// @param _fp The fee parameter\\n    /// @param _activeId The current active id\\n    function updateVolatilityAccumulated(FeeParameters memory _fp, uint256 _activeId) internal pure {\\n        uint256 volatilityAccumulated = (_activeId.absSub(_fp.indexRef) * Constants.BASIS_POINT_MAX) +\\n            _fp.volatilityReference;\\n        _fp.volatilityAccumulated = volatilityAccumulated > _fp.maxVolatilityAccumulated\\n            ? _fp.maxVolatilityAccumulated\\n            : uint24(volatilityAccumulated);\\n    }\\n\\n    /// @notice Returns the base fee added to a swap, with 18 decimals\\n    /// @param _fp The current fee parameters\\n    /// @return The fee with 18 decimals precision\\n    function getBaseFee(FeeParameters memory _fp) internal pure returns (uint256) {\\n        unchecked {\\n            return uint256(_fp.baseFactor) * _fp.binStep * 1e10;\\n        }\\n    }\\n\\n    /// @notice Returns the variable fee added to a swap, with 18 decimals\\n    /// @param _fp The current fee parameters\\n    /// @return variableFee The variable fee with 18 decimals precision\\n    function getVariableFee(FeeParameters memory _fp) internal pure returns (uint256 variableFee) {\\n        if (_fp.variableFeeControl != 0) {\\n            // Can't overflow as the max value is `max(uint24) * (max(uint24) * max(uint16)) ** 2 < max(uint104)`\\n            // It returns 18 decimals as:\\n            // decimals(variableFeeControl * (volatilityAccumulated * binStep)**2 / 100) = 4 + (4 + 4) * 2 - 2 = 18\\n            unchecked {\\n                uint256 _prod = uint256(_fp.volatilityAccumulated) * _fp.binStep;\\n                variableFee = (_prod * _prod * _fp.variableFeeControl + 99) / 100;\\n            }\\n        }\\n    }\\n\\n    /// @notice Return the amount of fees from an amount\\n    /// @dev Rounds amount up, follows `amount = amountWithFees - getFeeAmountFrom(fp, amountWithFees)`\\n    /// @param _fp The current fee parameter\\n    /// @param _amountWithFees The amount of token sent\\n    /// @return The fee amount from the amount sent\\n    function getFeeAmountFrom(FeeParameters memory _fp, uint256 _amountWithFees) internal pure returns (uint256) {\\n        return (_amountWithFees * getTotalFee(_fp) + Constants.PRECISION - 1) / (Constants.PRECISION);\\n    }\\n\\n    /// @notice Return the fees to add to an amount\\n    /// @dev Rounds amount up, follows `amountWithFees = amount + getFeeAmount(fp, amount)`\\n    /// @param _fp The current fee parameter\\n    /// @param _amount The amount of token sent\\n    /// @return The fee amount to add to the amount\\n    function getFeeAmount(FeeParameters memory _fp, uint256 _amount) internal pure returns (uint256) {\\n        uint256 _fee = getTotalFee(_fp);\\n        uint256 _denominator = Constants.PRECISION - _fee;\\n        return (_amount * _fee + _denominator - 1) / _denominator;\\n    }\\n\\n    /// @notice Return the fees added when an user adds liquidity and change the ratio in the active bin\\n    /// @dev Rounds amount up\\n    /// @param _fp The current fee parameter\\n    /// @param _amountWithFees The amount of token sent\\n    /// @return The fee amount\\n    function getFeeAmountForC(FeeParameters memory _fp, uint256 _amountWithFees) internal pure returns (uint256) {\\n        uint256 _fee = getTotalFee(_fp);\\n        uint256 _denominator = Constants.PRECISION * Constants.PRECISION;\\n        return (_amountWithFees * _fee * (_fee + Constants.PRECISION) + _denominator - 1) / _denominator;\\n    }\\n\\n    /// @notice Return the fees distribution added to an amount\\n    /// @param _fp The current fee parameter\\n    /// @param _fees The fee amount\\n    /// @return fees The fee distribution\\n    function getFeeAmountDistribution(FeeParameters memory _fp, uint256 _fees)\\n        internal\\n        pure\\n        returns (FeesDistribution memory fees)\\n    {\\n        fees.total = _fees.safe128();\\n        // unsafe math is fine because total >= protocol\\n        unchecked {\\n            fees.protocol = uint128((_fees * _fp.protocolShare) / Constants.BASIS_POINT_MAX);\\n        }\\n    }\\n\\n    /// @notice Return the total fee, i.e. baseFee + variableFee\\n    /// @param _fp The current fee parameter\\n    /// @return The total fee, with 18 decimals\\n    function getTotalFee(FeeParameters memory _fp) private pure returns (uint256) {\\n        unchecked {\\n            return getBaseFee(_fp) + getVariableFee(_fp);\\n        }\\n    }\\n}\",\"keccak256\":\"0x47652174aab7269a8b1ecd334ae502e782958e0fe9a7188d36dacbd82dbe26a1\",\"license\":\"MIT\"},\"contracts/LB/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../LBErrors.sol\\\";\\n\\n/// @title Liquidity Book Safe Cast Library\\n/// @author Trader Joe\\n/// @notice Helper contract used for converting uint values safely\\nlibrary SafeCast {\\n    /// @notice Returns x on uint248 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint248\\n    function safe248(uint256 x) internal pure returns (uint248 y) {\\n        if ((y = uint248(x)) != x) revert SafeCast__Exceeds248Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint240 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint240\\n    function safe240(uint256 x) internal pure returns (uint240 y) {\\n        if ((y = uint240(x)) != x) revert SafeCast__Exceeds240Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint232 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint232\\n    function safe232(uint256 x) internal pure returns (uint232 y) {\\n        if ((y = uint232(x)) != x) revert SafeCast__Exceeds232Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint224 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint224\\n    function safe224(uint256 x) internal pure returns (uint224 y) {\\n        if ((y = uint224(x)) != x) revert SafeCast__Exceeds224Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint216 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint216\\n    function safe216(uint256 x) internal pure returns (uint216 y) {\\n        if ((y = uint216(x)) != x) revert SafeCast__Exceeds216Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint208 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint208\\n    function safe208(uint256 x) internal pure returns (uint208 y) {\\n        if ((y = uint208(x)) != x) revert SafeCast__Exceeds208Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint200 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint200\\n    function safe200(uint256 x) internal pure returns (uint200 y) {\\n        if ((y = uint200(x)) != x) revert SafeCast__Exceeds200Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint192 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint192\\n    function safe192(uint256 x) internal pure returns (uint192 y) {\\n        if ((y = uint192(x)) != x) revert SafeCast__Exceeds192Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint184 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint184\\n    function safe184(uint256 x) internal pure returns (uint184 y) {\\n        if ((y = uint184(x)) != x) revert SafeCast__Exceeds184Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint176 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint176\\n    function safe176(uint256 x) internal pure returns (uint176 y) {\\n        if ((y = uint176(x)) != x) revert SafeCast__Exceeds176Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint168 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint168\\n    function safe168(uint256 x) internal pure returns (uint168 y) {\\n        if ((y = uint168(x)) != x) revert SafeCast__Exceeds168Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint160 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint160\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        if ((y = uint160(x)) != x) revert SafeCast__Exceeds160Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint152 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint152\\n    function safe152(uint256 x) internal pure returns (uint152 y) {\\n        if ((y = uint152(x)) != x) revert SafeCast__Exceeds152Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint144 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint144\\n    function safe144(uint256 x) internal pure returns (uint144 y) {\\n        if ((y = uint144(x)) != x) revert SafeCast__Exceeds144Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint136 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint136\\n    function safe136(uint256 x) internal pure returns (uint136 y) {\\n        if ((y = uint136(x)) != x) revert SafeCast__Exceeds136Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint128 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint128\\n    function safe128(uint256 x) internal pure returns (uint128 y) {\\n        if ((y = uint128(x)) != x) revert SafeCast__Exceeds128Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint120 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint120\\n    function safe120(uint256 x) internal pure returns (uint120 y) {\\n        if ((y = uint120(x)) != x) revert SafeCast__Exceeds120Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint112 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint112\\n    function safe112(uint256 x) internal pure returns (uint112 y) {\\n        if ((y = uint112(x)) != x) revert SafeCast__Exceeds112Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint104 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint104\\n    function safe104(uint256 x) internal pure returns (uint104 y) {\\n        if ((y = uint104(x)) != x) revert SafeCast__Exceeds104Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint96 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint96\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        if ((y = uint96(x)) != x) revert SafeCast__Exceeds96Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint88 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint88\\n    function safe88(uint256 x) internal pure returns (uint88 y) {\\n        if ((y = uint88(x)) != x) revert SafeCast__Exceeds88Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint80 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint80\\n    function safe80(uint256 x) internal pure returns (uint80 y) {\\n        if ((y = uint80(x)) != x) revert SafeCast__Exceeds80Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint72 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint72\\n    function safe72(uint256 x) internal pure returns (uint72 y) {\\n        if ((y = uint72(x)) != x) revert SafeCast__Exceeds72Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint64 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint64\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        if ((y = uint64(x)) != x) revert SafeCast__Exceeds64Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint56 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint56\\n    function safe56(uint256 x) internal pure returns (uint56 y) {\\n        if ((y = uint56(x)) != x) revert SafeCast__Exceeds56Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint48 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint48\\n    function safe48(uint256 x) internal pure returns (uint48 y) {\\n        if ((y = uint48(x)) != x) revert SafeCast__Exceeds48Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint40 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint40\\n    function safe40(uint256 x) internal pure returns (uint40 y) {\\n        if ((y = uint40(x)) != x) revert SafeCast__Exceeds40Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint32 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint32\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        if ((y = uint32(x)) != x) revert SafeCast__Exceeds32Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint24 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint24\\n    function safe24(uint256 x) internal pure returns (uint24 y) {\\n        if ((y = uint24(x)) != x) revert SafeCast__Exceeds24Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint16 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint16\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        if ((y = uint16(x)) != x) revert SafeCast__Exceeds16Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint8 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint8\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        if ((y = uint8(x)) != x) revert SafeCast__Exceeds8Bits(x);\\n    }\\n}\",\"keccak256\":\"0x5dc5b2aed1c560da9c56a6d116a297bfd87a4911b28928f00a5d32609bb677fa\",\"license\":\"MIT\"},\"contracts/LB/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title Liquidity Book Safe Math Helper Library\\n/// @author Trader Joe\\n/// @notice Helper contract used for calculating absolute value safely\\nlibrary SafeMath {\\n    /// @notice absSub, can't underflow or overflow\\n    /// @param x The first value\\n    /// @param y The second value\\n    /// @return The result of abs(x - y)\\n    function absSub(uint256 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            return x > y ? x - y : y - x;\\n        }\\n    }\\n}\",\"keccak256\":\"0x4b15bb1da2282e8fbcbf8c54f323bf7edcbd678ed53f8f0f977b40d79cb0a7ef\",\"license\":\"MIT\"},\"contracts/automator/LBActiveManagerV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../LB/interfaces/ILBPair.sol';\\nimport '../interfaces/ILBStrategy.sol';\\n\\nimport '@chainlink/contracts/src/v0.8/AutomationCompatible.sol';\\n\\n/// @title LBActiveStratManager V2\\n/// @author SteakHut Finance\\n/// @notice contract to enable rebalances of the underlying strategy using existing parameters\\n/// @notice this strategy will chase an active bin once it goes within x number bins of current range\\n/// @notice this strategy will also perform a rebalance once it becomes one sided\\ncontract LBActiveStratManagerActiveV2 is\\n    Ownable,\\n    AutomationCompatibleInterface\\n{\\n    using SafeERC20 for IERC20;\\n    address public immutable strategyAddress;\\n    uint256 public binOffset;\\n\\n    //tracks rebalances and attempts to ~equal weight on next rebalance\\n    bool public isTokenXWeighted;\\n    bool public isTokenYWeighted;\\n    uint256 public centerOffset;\\n\\n    //harvesting params\\n    uint256 public lastTimestamp;\\n    uint256 public period = 86400; //48 hours\\n    address public gasCaller;\\n\\n    /// -----------------------------------------------------------\\n    /// Constructor\\n    /// -----------------------------------------------------------\\n\\n    constructor(\\n        address _strategyAddress,\\n        uint256 _binOffset,\\n        uint256 _centerOffset\\n    ) {\\n        strategyAddress = _strategyAddress;\\n        binOffset = _binOffset;\\n        centerOffset = _centerOffset;\\n    }\\n\\n    /// -----------------------------------------------------------\\n    /// Manager Functions\\n    /// -----------------------------------------------------------\\n\\n    /// @notice Updates binOffset\\n    /// @param _binOffset new bin offset.\\n    function setBinOffset(uint256 _binOffset) external onlyOwner {\\n        require(_binOffset >= 0, 'Manager: Bin offset too small');\\n        binOffset = _binOffset;\\n    }\\n\\n    /// @notice Updates centerOffset\\n    /// @param _centerOffset new center offset.\\n    function setCenterOffset(uint256 _centerOffset) external onlyOwner {\\n        require(_centerOffset >= 0, 'Manager: Center offset too small');\\n        centerOffset = _centerOffset;\\n    }\\n\\n    /// @notice Updates the minimum period between harvests\\n    /// @param _period new minimum period.\\n    function setPeriod(uint256 _period) external onlyOwner {\\n        require(_period > 3600, 'Manager: Period too small');\\n        period = _period;\\n    }\\n\\n    /// @notice Rescues funds stuck\\n    /// @param _token address of the token to rescue.\\n    function inCaseTokensGetStuck(address _token) external onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransfer(msg.sender, amount);\\n    }\\n\\n    /// @notice manual rebalance underlying position\\n    function manualRebalance() external onlyOwner {\\n        //set the weightings to be neutral as manual rebalance\\n        isTokenYWeighted = false;\\n        isTokenXWeighted = false;\\n\\n        ILBStrategy(strategyAddress).executeRebalance();\\n    }\\n\\n    /// -----------------------------------------------------------\\n    /// View / Pure Functions\\n    /// -----------------------------------------------------------\\n\\n    /// @notice returns the minimum and maximum bin currently used by the underlying strategy\\n    function _checkMinMaxActiveBins(\\n        uint256[] memory activeBins\\n    ) public pure returns (uint256 minBin, uint256 maxBin) {\\n        //do a first run and set min bin to the first item\\n        bool isFirstRun = true;\\n\\n        for (uint256 i; i < activeBins.length; i++) {\\n            if (activeBins[i] < minBin || isFirstRun) {\\n                minBin = activeBins[i];\\n                isFirstRun = false;\\n            }\\n            if (activeBins[i] > maxBin) {\\n                maxBin = activeBins[i];\\n            }\\n        }\\n    }\\n\\n    /// -----------------------------------------------------------\\n    /// Chainlink Functions\\n    /// -----------------------------------------------------------\\n\\n    /// @notice Chainlink Check Upkeep Function\\n    /// @notice checks to moves liquidity around the active bin once binOffset is achieved\\n    /// @notice checks if enough time has passed to perform a harvest only\\n    function checkUpkeep(\\n        bytes calldata\\n    )\\n        external\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory performData)\\n    {\\n        upkeepNeeded = false;\\n\\n        //fetch all the active bins in the strategy\\n        uint256[] memory activeBins = ILBStrategy(strategyAddress)\\n            .strategyActiveBins();\\n        (uint256 minBin, uint256 maxBin) = _checkMinMaxActiveBins(activeBins);\\n\\n        //get the center of the active bins\\n        uint256 binLength = activeBins.length;\\n        uint256 centerBin = binLength / 2;\\n        uint256 minCenterBin = activeBins[centerBin - centerOffset];\\n        uint256 maxCenterBin = activeBins[centerBin + centerOffset];\\n\\n        //fetch the current activeId of the lb pair\\n        address _lbPair = ILBStrategy(strategyAddress).lbPair();\\n        (, , uint256 activeId) = ILBPair(_lbPair).getReservesAndId();\\n\\n        //if the active bin is within binOffset of the active bin rebalance the underlying strategy\\n        if (activeId <= minBin + binOffset) {\\n            upkeepNeeded = true;\\n        }\\n        if (activeId >= maxBin - binOffset) {\\n            upkeepNeeded = true;\\n        }\\n\\n        //if the ratio is skewed rebalance to get ratio back to equal weight\\n        if (\\n            (activeId <= minCenterBin && isTokenYWeighted) ||\\n            (activeId >= maxCenterBin && isTokenXWeighted)\\n        ) {\\n            //requires upkeep to equal weight bins\\n            upkeepNeeded = true;\\n        }\\n\\n        //require an upkeep if there has been minimum time between harvests\\n        if (block.timestamp > lastTimestamp + period) {\\n            upkeepNeeded = true;\\n        }\\n\\n        performData; //silence unused parameter\\n    }\\n\\n    /// @notice Chainlink Perform Upkeep Function\\n    /// @notice moves liquidity around the active bin once binOffset is achieved\\n    /// @notice harvest if enough time has passed to perform a harvest only\\n    function performUpkeep(bytes calldata) external override {\\n        //get the underlying lbPair and activeId\\n        address _lbPair = ILBStrategy(strategyAddress).lbPair();\\n        (, , uint256 activeId) = ILBPair(_lbPair).getReservesAndId();\\n\\n        //fetch the active bins in the strategy\\n        uint256[] memory activeBins = ILBStrategy(strategyAddress)\\n            .strategyActiveBins();\\n\\n        // check the min and max active bins\\n        (uint256 minBin, uint256 maxBin) = _checkMinMaxActiveBins(activeBins);\\n\\n        //get the center of the active bins\\n        uint256 binLength = activeBins.length;\\n        uint256 centerBin = binLength / 2;\\n        uint256 minCenterBin = activeBins[centerBin - centerOffset];\\n        uint256 maxCenterBin = activeBins[centerBin + centerOffset];\\n\\n        //revalidating the upkeep in the performUpkeep function\\n        //if the active bin is within binOffset of the active bin rebalance the underlying strategy\\n        //idle strategy funds are put to work on the next rebalance\\n        //we dont need to check bin limit as funds will always be the underlying bin length\\n        if (activeId <= minBin + binOffset || activeId >= maxBin - binOffset) {\\n            //the liquidty upon this rebalance will be skewed so turn on trigger switch for next\\n            if (activeId <= minBin + binOffset) {\\n                //strategy is token X weighted\\n                isTokenXWeighted = true;\\n                isTokenYWeighted = false;\\n            }\\n            if (activeId >= maxBin - binOffset) {\\n                //strategy is token Y weighted\\n                isTokenXWeighted = false;\\n                isTokenYWeighted = true;\\n            }\\n\\n            //rebalance keeping the same parameters as before\\n            //does not require a harvest as executeRebalance handles this\\n            ILBStrategy(strategyAddress).executeRebalance();\\n        } else if (\\n            (activeId <= minCenterBin && isTokenYWeighted) ||\\n            (activeId >= maxCenterBin && isTokenXWeighted)\\n        ) {\\n            //reset the weighting switch\\n            isTokenYWeighted = false;\\n            isTokenXWeighted = false;\\n\\n            //rebalance keeping the same parameters as before\\n            //does not require a harvest as executeRebalance handles this\\n            ILBStrategy(strategyAddress).executeRebalance();\\n        } else {\\n            //harvest rewards from strategy; can be called anytime\\n            _harvest();\\n        }\\n    }\\n\\n    /// -----------------------------------------------------------\\n    /// Internal Functions\\n    /// -----------------------------------------------------------\\n\\n    /// @notice executes a harvest of the associated strategy\\n    function _harvest() internal {\\n        ILBStrategy strategy = ILBStrategy(strategyAddress);\\n        strategy.harvest();\\n\\n        //update the last harvest timestamp\\n        lastTimestamp = block.timestamp;\\n    }\\n\\n    /// -----------------------------------------------------------\\n    /// END\\n    /// -----------------------------------------------------------\\n}\\n\",\"keccak256\":\"0xcef11d06538e9eae7bf6e8d35255647f2816b5a44c0e00cb9ee5d3a7ff9fb0ad\",\"license\":\"MIT\"},\"contracts/interfaces/ILBStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ILBStrategy {\\n    /// @notice The liquidity parameters, such as:\\n    /// @param tokenX: The address of token X\\n    /// @param tokenY: The address of token Y\\n    /// @param pair: The address of the LB pair\\n    /// @param binStep: BinStep as per LB Pair\\n    /// @param deltaIds: the bins you want to add liquidity to. Each value is relative to the active bin ID\\n    /// @param distributionX: The percentage of X you want to add to each bin in deltaIds\\n    /// @param distributionY: The percentage of Y you want to add to each bin in deltaIds\\n    /// @param idSlippage: The slippage tolerance in case active bin moves during time it takes to transact\\n    struct StrategyParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        address pair;\\n        uint16 binStep;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        uint256 idSlippage;\\n    }\\n\\n    function deltaIds() external view returns (int256[] memory deltaIds);\\n\\n    function distributionX()\\n        external\\n        view\\n        returns (uint256[] memory distributionX);\\n\\n    function distributionY()\\n        external\\n        view\\n        returns (uint256[] memory distributionY);\\n\\n    function idSlippage() external view returns (uint256);\\n\\n    function vault() external view returns (address);\\n\\n    function lbPair() external view returns (address);\\n\\n    function setKeeper(address _keeper) external;\\n\\n    function keeper() external view returns (address);\\n\\n    function strategyPositionAtIndex(\\n        uint256 _index\\n    ) external view returns (uint256);\\n\\n    function strategyPositionNumber() external view returns (uint256);\\n\\n    function checkProposedBinLength(\\n        int256[] memory proposedDeltas,\\n        uint256 activeId\\n    ) external view returns (uint256);\\n\\n    function addLiquidity(\\n        uint256 amountX,\\n        uint256 amountY,\\n        uint256 amountXMin,\\n        uint256 amountYMin\\n    ) external returns (uint256[] memory liquidityMinted);\\n\\n    function binStep() external view returns (uint16);\\n\\n    function balanceOfLiquidities()\\n        external\\n        view\\n        returns (uint256 totalLiquidityBalance);\\n\\n    function removeLiquidity(\\n        uint256 denominator\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function tokenX() external view returns (IERC20);\\n\\n    function tokenY() external view returns (IERC20);\\n\\n    function harvest()\\n        external\\n        returns (uint256 amountXReceived, uint256 amountYReceived);\\n\\n    function earn() external;\\n\\n    function retireStrat() external;\\n\\n    function panic() external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function paused() external view returns (bool);\\n\\n    function joeRouter() external view returns (address);\\n\\n    function binHasYLiquidity(\\n        int256[] memory _deltaIds\\n    ) external view returns (bool hasYLiquidity);\\n\\n    function binHasXLiquidity(\\n        int256[] memory _deltaIds\\n    ) external view returns (bool hasXLiquidity);\\n\\n    function beforeDeposit() external;\\n\\n    function rewardsAvailable()\\n        external\\n        view\\n        returns (uint256 rewardsX, uint256 rewardsY);\\n\\n    function executeRebalance(\\n        int256[] memory _deltaIds,\\n        uint256[] memory _distributionX,\\n        uint256[] memory _distributionY,\\n        uint256 _idSlippage\\n    ) external returns (uint256 liquidityAfter);\\n\\n    function executeRebalance()\\n        external\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function checkLengthsPerformRebalance() external;\\n\\n    function strategyActiveBins()\\n        external\\n        view\\n        returns (uint256[] memory activeBins);\\n\\n    function getBalanceX() external view returns (uint256);\\n\\n    function getBalanceY() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc4156c0884957238887daef0e4b5af54aa5c739ad690e5383b74b78160234ff0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526201518060055534801561001757600080fd5b5060405161161e38038061161e833981016040819052610036916100a8565b61003f33610058565b6001600160a01b039092166080526001556003556100eb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000606084860312156100bd57600080fd5b83516001600160a01b03811681146100d457600080fd5b602085015160409095015190969495509392505050565b6080516114e061013e600039600081816102760152818161035301528181610441015281816105b301528181610694015281816107bc015281816108be01528181610a7f0152610c8d01526114e06000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a6116100cd578063c305d37611610081578063e45fec3111610066578063e45fec31146102c7578063ef78d4fd146102d0578063f2fde38b146102d957600080fd5b8063c305d376146102ab578063def68a9c146102b457600080fd5b80639f85adf1116100b25780639f85adf114610269578063bc6b74ab14610271578063be966e721461029857600080fd5b8063715018a6146102505780638da5cb5b1461025857600080fd5b80636964410e116101245780636c6be11e116101095780636c6be11e146101dc5780636d239733146102075780636e04ff0d1461022f57600080fd5b80636964410e146101bc5780636b2686d5146101cf57600080fd5b80630f3a9f651461015657806319d8ac611461016b5780632829c739146101875780634585e33b146101a9575b600080fd5b610169610164366004611093565b6102ec565b005b61017460045481565b6040519081526020015b60405180910390f35b60025461019990610100900460ff1681565b604051901515815260200161017e565b6101696101b73660046110ac565b61034f565b6101696101ca366004611093565b6106f2565b6002546101999060ff1681565b6006546101ef906001600160a01b031681565b6040516001600160a01b03909116815260200161017e565b61021a610215366004611189565b6106ff565b6040805192835260208301919091520161017e565b61024261023d3660046110ac565b6107b0565b60405161017e929190611264565b610169610a3e565b6000546001600160a01b03166101ef565b610169610a52565b6101ef7f000000000000000000000000000000000000000000000000000000000000000081565b6101696102a6366004611093565b610af0565b61017460015481565b6101696102c2366004611294565b610afd565b61017460035481565b61017460055481565b6101696102e7366004611294565b610b9f565b6102f4610c2f565b610e10811161034a5760405162461bcd60e51b815260206004820152601960248201527f4d616e616765723a20506572696f6420746f6f20736d616c6c0000000000000060448201526064015b60405180910390fd5b600555565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663625af7676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d391906112b8565b90506000816001600160a01b0316631b05b83e6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610415573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043991906112d5565b9250505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d69d1dac6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561049d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104c59190810190611303565b90506000806104d3836106ff565b8451919350915060006104e760028361139f565b9050600085600354836104fa91906113c1565b8151811061050a5761050a6113da565b602002602001015190506000866003548461052591906113f0565b81518110610535576105356113da565b602002602001015190506001548661054d91906113f0565b88111580610567575060015461056390866113c1565b8810155b1561063b5760015461057990876113f0565b881161058e576002805461ffff191660011790555b60015461059b90866113c1565b88106105b1576002805461ffff19166101001790555b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639bb71aef6040518163ffffffff1660e01b815260040160408051808303816000875af1158015610610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106349190611403565b50506106e5565b8188111580156106525750600254610100900460ff165b8061066a575080881015801561066a575060025460ff165b156106dd576002805461ffff1916905560408051639bb71aef60e01b815281516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692639bb71aef926004808201939182900301816000875af1158015610610573d6000803e3d6000fd5b6106e5610c89565b5050505050505050505050565b6106fa610c2f565b600155565b6000806001815b84518110156107a95783858281518110610722576107226113da565b602002602001015110806107335750815b156107595784818151811061074a5761074a6113da565b60200260200101519350600091505b8285828151811061076c5761076c6113da565b602002602001015111156107975784818151811061078c5761078c6113da565b602002602001015192505b806107a181611427565b915050610706565b5050915091565b600060606000915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d69d1dac6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610818573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108409190810190611303565b905060008061084e836106ff565b84519193509150600061086260028361139f565b90506000856003548361087591906113c1565b81518110610885576108856113da565b60200260200101519050600086600354846108a091906113f0565b815181106108b0576108b06113da565b6020026020010151905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663625af7676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561091a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093e91906112b8565b90506000816001600160a01b0316631b05b83e6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a491906112d5565b92505050600154886109b691906113f0565b81116109c15760019a505b6001546109ce90886113c1565b81106109d95760019a505b8381111580156109f05750600254610100900460ff165b80610a085750828110158015610a08575060025460ff165b15610a125760019a505b600554600454610a2291906113f0565b421115610a2e5760019a505b5050505050505050509250929050565b610a46610c2f565b610a506000610d1a565b565b610a5a610c2f565b6002805461ffff1916905560408051639bb71aef60e01b815281516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692639bb71aef926004808201939182900301816000875af1158015610ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aec9190611403565b5050565b610af8610c2f565b600355565b610b05610c2f565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b899190611440565b9050610aec6001600160a01b0383163383610d82565b610ba7610c2f565b6001600160a01b038116610c235760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610341565b610c2c81610d1a565b50565b6000546001600160a01b03163314610a505760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610341565b60007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b0316634641257d6040518163ffffffff1660e01b815260040160408051808303816000875af1158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190611403565b50504260045550565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e02908490610e07565b505050565b6000610e5c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610eec9092919063ffffffff16565b805190915015610e025780806020019051810190610e7a9190611459565b610e025760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610341565b6060610efb8484600085610f03565b949350505050565b606082471015610f7b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610341565b600080866001600160a01b03168587604051610f97919061147b565b60006040518083038185875af1925050503d8060008114610fd4576040519150601f19603f3d011682016040523d82523d6000602084013e610fd9565b606091505b5091509150610fea87838387610ff5565b979650505050505050565b6060831561106457825160000361105d576001600160a01b0385163b61105d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610341565b5081610efb565b610efb83838151156110795781518083602001fd5b8060405162461bcd60e51b81526004016103419190611497565b6000602082840312156110a557600080fd5b5035919050565b600080602083850312156110bf57600080fd5b823567ffffffffffffffff808211156110d757600080fd5b818501915085601f8301126110eb57600080fd5b8135818111156110fa57600080fd5b86602082850101111561110c57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561115d5761115d61111e565b604052919050565b600067ffffffffffffffff82111561117f5761117f61111e565b5060051b60200190565b6000602080838503121561119c57600080fd5b823567ffffffffffffffff8111156111b357600080fd5b8301601f810185136111c457600080fd5b80356111d76111d282611165565b611134565b81815260059190911b820183019083810190878311156111f657600080fd5b928401925b82841015610fea578335825292840192908401906111fb565b60005b8381101561122f578181015183820152602001611217565b50506000910152565b60008151808452611250816020860160208601611214565b601f01601f19169290920160200192915050565b8215158152604060208201526000610efb6040830184611238565b6001600160a01b0381168114610c2c57600080fd5b6000602082840312156112a657600080fd5b81356112b18161127f565b9392505050565b6000602082840312156112ca57600080fd5b81516112b18161127f565b6000806000606084860312156112ea57600080fd5b8351925060208401519150604084015190509250925092565b6000602080838503121561131657600080fd5b825167ffffffffffffffff81111561132d57600080fd5b8301601f8101851361133e57600080fd5b805161134c6111d282611165565b81815260059190911b8201830190838101908783111561136b57600080fd5b928401925b82841015610fea57835182529284019290840190611370565b634e487b7160e01b600052601160045260246000fd5b6000826113bc57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156113d4576113d4611389565b92915050565b634e487b7160e01b600052603260045260246000fd5b808201808211156113d4576113d4611389565b6000806040838503121561141657600080fd5b505080516020909101519092909150565b60006001820161143957611439611389565b5060010190565b60006020828403121561145257600080fd5b5051919050565b60006020828403121561146b57600080fd5b815180151581146112b157600080fd5b6000825161148d818460208701611214565b9190910192915050565b6020815260006112b1602083018461123856fea2646970667358221220df733740973a6c363f725280f8c7be7f925a7abf4582aa64a2f62a705aba4cd664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a6116100cd578063c305d37611610081578063e45fec3111610066578063e45fec31146102c7578063ef78d4fd146102d0578063f2fde38b146102d957600080fd5b8063c305d376146102ab578063def68a9c146102b457600080fd5b80639f85adf1116100b25780639f85adf114610269578063bc6b74ab14610271578063be966e721461029857600080fd5b8063715018a6146102505780638da5cb5b1461025857600080fd5b80636964410e116101245780636c6be11e116101095780636c6be11e146101dc5780636d239733146102075780636e04ff0d1461022f57600080fd5b80636964410e146101bc5780636b2686d5146101cf57600080fd5b80630f3a9f651461015657806319d8ac611461016b5780632829c739146101875780634585e33b146101a9575b600080fd5b610169610164366004611093565b6102ec565b005b61017460045481565b6040519081526020015b60405180910390f35b60025461019990610100900460ff1681565b604051901515815260200161017e565b6101696101b73660046110ac565b61034f565b6101696101ca366004611093565b6106f2565b6002546101999060ff1681565b6006546101ef906001600160a01b031681565b6040516001600160a01b03909116815260200161017e565b61021a610215366004611189565b6106ff565b6040805192835260208301919091520161017e565b61024261023d3660046110ac565b6107b0565b60405161017e929190611264565b610169610a3e565b6000546001600160a01b03166101ef565b610169610a52565b6101ef7f000000000000000000000000000000000000000000000000000000000000000081565b6101696102a6366004611093565b610af0565b61017460015481565b6101696102c2366004611294565b610afd565b61017460035481565b61017460055481565b6101696102e7366004611294565b610b9f565b6102f4610c2f565b610e10811161034a5760405162461bcd60e51b815260206004820152601960248201527f4d616e616765723a20506572696f6420746f6f20736d616c6c0000000000000060448201526064015b60405180910390fd5b600555565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663625af7676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d391906112b8565b90506000816001600160a01b0316631b05b83e6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610415573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043991906112d5565b9250505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d69d1dac6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561049d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104c59190810190611303565b90506000806104d3836106ff565b8451919350915060006104e760028361139f565b9050600085600354836104fa91906113c1565b8151811061050a5761050a6113da565b602002602001015190506000866003548461052591906113f0565b81518110610535576105356113da565b602002602001015190506001548661054d91906113f0565b88111580610567575060015461056390866113c1565b8810155b1561063b5760015461057990876113f0565b881161058e576002805461ffff191660011790555b60015461059b90866113c1565b88106105b1576002805461ffff19166101001790555b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639bb71aef6040518163ffffffff1660e01b815260040160408051808303816000875af1158015610610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106349190611403565b50506106e5565b8188111580156106525750600254610100900460ff165b8061066a575080881015801561066a575060025460ff165b156106dd576002805461ffff1916905560408051639bb71aef60e01b815281516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692639bb71aef926004808201939182900301816000875af1158015610610573d6000803e3d6000fd5b6106e5610c89565b5050505050505050505050565b6106fa610c2f565b600155565b6000806001815b84518110156107a95783858281518110610722576107226113da565b602002602001015110806107335750815b156107595784818151811061074a5761074a6113da565b60200260200101519350600091505b8285828151811061076c5761076c6113da565b602002602001015111156107975784818151811061078c5761078c6113da565b602002602001015192505b806107a181611427565b915050610706565b5050915091565b600060606000915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d69d1dac6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610818573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108409190810190611303565b905060008061084e836106ff565b84519193509150600061086260028361139f565b90506000856003548361087591906113c1565b81518110610885576108856113da565b60200260200101519050600086600354846108a091906113f0565b815181106108b0576108b06113da565b6020026020010151905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663625af7676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561091a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093e91906112b8565b90506000816001600160a01b0316631b05b83e6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a491906112d5565b92505050600154886109b691906113f0565b81116109c15760019a505b6001546109ce90886113c1565b81106109d95760019a505b8381111580156109f05750600254610100900460ff165b80610a085750828110158015610a08575060025460ff165b15610a125760019a505b600554600454610a2291906113f0565b421115610a2e5760019a505b5050505050505050509250929050565b610a46610c2f565b610a506000610d1a565b565b610a5a610c2f565b6002805461ffff1916905560408051639bb71aef60e01b815281516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692639bb71aef926004808201939182900301816000875af1158015610ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aec9190611403565b5050565b610af8610c2f565b600355565b610b05610c2f565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b899190611440565b9050610aec6001600160a01b0383163383610d82565b610ba7610c2f565b6001600160a01b038116610c235760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610341565b610c2c81610d1a565b50565b6000546001600160a01b03163314610a505760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610341565b60007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b0316634641257d6040518163ffffffff1660e01b815260040160408051808303816000875af1158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190611403565b50504260045550565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e02908490610e07565b505050565b6000610e5c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610eec9092919063ffffffff16565b805190915015610e025780806020019051810190610e7a9190611459565b610e025760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610341565b6060610efb8484600085610f03565b949350505050565b606082471015610f7b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610341565b600080866001600160a01b03168587604051610f97919061147b565b60006040518083038185875af1925050503d8060008114610fd4576040519150601f19603f3d011682016040523d82523d6000602084013e610fd9565b606091505b5091509150610fea87838387610ff5565b979650505050505050565b6060831561106457825160000361105d576001600160a01b0385163b61105d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610341565b5081610efb565b610efb83838151156110795781518083602001fd5b8060405162461bcd60e51b81526004016103419190611497565b6000602082840312156110a557600080fd5b5035919050565b600080602083850312156110bf57600080fd5b823567ffffffffffffffff808211156110d757600080fd5b818501915085601f8301126110eb57600080fd5b8135818111156110fa57600080fd5b86602082850101111561110c57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561115d5761115d61111e565b604052919050565b600067ffffffffffffffff82111561117f5761117f61111e565b5060051b60200190565b6000602080838503121561119c57600080fd5b823567ffffffffffffffff8111156111b357600080fd5b8301601f810185136111c457600080fd5b80356111d76111d282611165565b611134565b81815260059190911b820183019083810190878311156111f657600080fd5b928401925b82841015610fea578335825292840192908401906111fb565b60005b8381101561122f578181015183820152602001611217565b50506000910152565b60008151808452611250816020860160208601611214565b601f01601f19169290920160200192915050565b8215158152604060208201526000610efb6040830184611238565b6001600160a01b0381168114610c2c57600080fd5b6000602082840312156112a657600080fd5b81356112b18161127f565b9392505050565b6000602082840312156112ca57600080fd5b81516112b18161127f565b6000806000606084860312156112ea57600080fd5b8351925060208401519150604084015190509250925092565b6000602080838503121561131657600080fd5b825167ffffffffffffffff81111561132d57600080fd5b8301601f8101851361133e57600080fd5b805161134c6111d282611165565b81815260059190911b8201830190838101908783111561136b57600080fd5b928401925b82841015610fea57835182529284019290840190611370565b634e487b7160e01b600052601160045260246000fd5b6000826113bc57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156113d4576113d4611389565b92915050565b634e487b7160e01b600052603260045260246000fd5b808201808211156113d4576113d4611389565b6000806040838503121561141657600080fd5b505080516020909101519092909150565b60006001820161143957611439611389565b5060010190565b60006020828403121561145257600080fd5b5051919050565b60006020828403121561146b57600080fd5b815180151581146112b157600080fd5b6000825161148d818460208701611214565b9190910192915050565b6020815260006112b1602083018461123856fea2646970667358221220df733740973a6c363f725280f8c7be7f925a7abf4582aa64a2f62a705aba4cd664736f6c63430008110033",
  "devdoc": {
    "author": "SteakHut Finance",
    "kind": "dev",
    "methods": {
      "inCaseTokensGetStuck(address)": {
        "params": {
          "_token": "address of the token to rescue."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBinOffset(uint256)": {
        "params": {
          "_binOffset": "new bin offset."
        }
      },
      "setCenterOffset(uint256)": {
        "params": {
          "_centerOffset": "new center offset."
        }
      },
      "setPeriod(uint256)": {
        "params": {
          "_period": "new minimum period."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "LBActiveStratManager V2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_checkMinMaxActiveBins(uint256[])": {
        "notice": "returns the minimum and maximum bin currently used by the underlying strategy"
      },
      "checkUpkeep(bytes)": {
        "notice": "Chainlink Check Upkeep Functionchecks to moves liquidity around the active bin once binOffset is achievedchecks if enough time has passed to perform a harvest only"
      },
      "constructor": {
        "notice": "----------------------------------------------------------- Constructor -----------------------------------------------------------"
      },
      "inCaseTokensGetStuck(address)": {
        "notice": "Rescues funds stuck"
      },
      "manualRebalance()": {
        "notice": "manual rebalance underlying position"
      },
      "performUpkeep(bytes)": {
        "notice": "Chainlink Perform Upkeep Functionmoves liquidity around the active bin once binOffset is achievedharvest if enough time has passed to perform a harvest only"
      },
      "setBinOffset(uint256)": {
        "notice": "Updates binOffset"
      },
      "setCenterOffset(uint256)": {
        "notice": "Updates centerOffset"
      },
      "setPeriod(uint256)": {
        "notice": "Updates the minimum period between harvests"
      }
    },
    "notice": "contract to enable rebalances of the underlying strategy using existing parametersthis strategy will chase an active bin once it goes within x number bins of current rangethis strategy will also perform a rebalance once it becomes one sided",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 65,
        "contract": "contracts/automator/LBActiveManagerV2.sol:LBActiveStratManagerActiveV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7689,
        "contract": "contracts/automator/LBActiveManagerV2.sol:LBActiveStratManagerActiveV2",
        "label": "binOffset",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7691,
        "contract": "contracts/automator/LBActiveManagerV2.sol:LBActiveStratManagerActiveV2",
        "label": "isTokenXWeighted",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 7693,
        "contract": "contracts/automator/LBActiveManagerV2.sol:LBActiveStratManagerActiveV2",
        "label": "isTokenYWeighted",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 7695,
        "contract": "contracts/automator/LBActiveManagerV2.sol:LBActiveStratManagerActiveV2",
        "label": "centerOffset",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7697,
        "contract": "contracts/automator/LBActiveManagerV2.sol:LBActiveStratManagerActiveV2",
        "label": "lastTimestamp",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7700,
        "contract": "contracts/automator/LBActiveManagerV2.sol:LBActiveStratManagerActiveV2",
        "label": "period",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7702,
        "contract": "contracts/automator/LBActiveManagerV2.sol:LBActiveStratManagerActiveV2",
        "label": "gasCaller",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}