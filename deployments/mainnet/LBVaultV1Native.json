{
  "address": "0x717955905bf71b84651f4eD75AAC4C6A4b33b410",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "Math512Bits__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "SafeCast__Exceeds24Bits",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountX",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "UpgradeStrat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountX",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountXDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountYDesired",
          "type": "uint256"
        }
      ],
      "name": "calcSharesAndAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountX",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountY",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountX",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountY",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountXMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountYMin",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountXActual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountYActual",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountX",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountY",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountXMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountYMin",
          "type": "uint256"
        }
      ],
      "name": "depositAVAXPair",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountXActual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountYActual",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "getUnderlyingAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalX",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalY",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lbToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "inCaseLBTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStrategyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "contract ILBStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wavax",
      "outputs": [
        {
          "internalType": "contract IWrappedNative",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountX",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountY",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdrawAVAXPair",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountX",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountY",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x94c71609cfaf2ec9c2ff935242624780f443bdae360d842b540991c36f69572a",
  "receipt": {
    "to": null,
    "from": "0xBE15BC0A3e37F1A3445DEfb4F0FF6eba0E4F19E2",
    "contractAddress": "0x717955905bf71b84651f4eD75AAC4C6A4b33b410",
    "transactionIndex": 0,
    "gasUsed": "3082472",
    "logsBloom": "0x
    "blockHash": "0x9d1bbc589a9e4c6e7b7260a83fbe2479d34bcc3e85a162a0b28aedf1337c88e0",
    "transactionHash": "0x94c71609cfaf2ec9c2ff935242624780f443bdae360d842b540991c36f69572a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26694836,
        "transactionHash": "0x94c71609cfaf2ec9c2ff935242624780f443bdae360d842b540991c36f69572a",
        "address": "0x717955905bf71b84651f4eD75AAC4C6A4b33b410",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000be15bc0a3e37f1a3445defb4f0ff6eba0e4f19e2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9d1bbc589a9e4c6e7b7260a83fbe2479d34bcc3e85a162a0b28aedf1337c88e0"
      }
    ],
    "blockNumber": 26694836,
    "cumulativeGasUsed": "3082472",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Personal LB Vault",
    "Personal LB Vault"
  ],
  "numDeployments": 1,
  "solcInputHash": "b51c85b2a0d89b6c122af7f8ed7f2234",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"Math512Bits__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"SafeCast__Exceeds24Bits\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradeStrat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountXDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountYDesired\",\"type\":\"uint256\"}],\"name\":\"calcSharesAndAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountXMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountYMin\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountXActual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountYActual\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountXMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountYMin\",\"type\":\"uint256\"}],\"name\":\"depositAVAXPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountXActual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountYActual\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lbToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"inCaseLBTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract ILBStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wavax\",\"outputs\":[{\"internalType\":\"contract IWrappedNative\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdrawAVAXPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"calcSharesAndAmounts(uint256,uint256)\":{\"details\":\"Calculates the largest possible `amountx` and `amountY` such that they're in the same proportion as total amounts, but not greater than `amountXDesired` and `amountYDesired` respectively.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256,uint256,uint256,uint256)\":{\"params\":{\"amountX\":\"amount of tokenX to deposit\",\"amountXMin\":\"miniumum amount of tokenX to deposit incl. slippage\",\"amountY\":\"amount of tokenY to deposit\",\"amountYMin\":\"miniumum amount of tokenY to deposit incl. slippage\"},\"returns\":{\"amountXActual\":\"amount token X accepted as deposit\",\"amountYActual\":\"amount token Y accepted as deposit\",\"shares\":\"minted to the depoositor\"}},\"depositAVAXPair(uint256,uint256,uint256,uint256)\":{\"params\":{\"amountX\":\"amount of tokenX to deposit\",\"amountXMin\":\"miniumum amount of tokenX to deposit incl. slippage\",\"amountY\":\"amount of tokenY to deposit\",\"amountYMin\":\"miniumum amount of tokenY to deposit incl. slippage\"},\"returns\":{\"amountXActual\":\"amount token X accepted as deposit\",\"amountYActual\":\"amount token Y accepted as deposit\",\"shares\":\"minted to the depoositor\"}},\"getUnderlyingAssets(uint256)\":{\"params\":{\"_shares\":\"amount of shares\"},\"returns\":{\"totalX\":\"amounts of tokenX\",\"totalY\":\"amounts of tokenY\"}},\"inCaseLBTokensGetStuck(address,uint256)\":{\"params\":{\"_id\":\"id of the token to rescue.\",\"_lbToken\":\"address of the token to rescue.\"}},\"inCaseTokensGetStuck(address)\":{\"params\":{\"_token\":\"address of the token to rescue.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setStrategyAddress(address)\":{\"params\":{\"_strategy\":\"address of the proposed new strategy.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"want()\":{\"returns\":{\"_0\":\"tokenX address of first token\",\"_1\":\"tokenY address of second token\"}},\"withdraw(uint256)\":{\"params\":{\"_shares\":\"amount of shares to withdraw from the system\"},\"returns\":{\"amountX\":\"the amount of token X removed\",\"amountY\":\"the amount of token Y removed\"}},\"withdrawAVAXPair(uint256)\":{\"params\":{\"_shares\":\"amount of shares to withdraw from the system\"},\"returns\":{\"amountX\":\"the amount of token X removed\",\"amountY\":\"the amount of token Y removed\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"Math512Bits__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Math512Bits errors \"}]},\"events\":{\"UpgradeStrat(address)\":{\"notice\":\"----------------------------------------------------------- Events -----------------------------------------------------------\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"----------------------------------------------------------- Constructor -----------------------------------------------------------\"},\"deposit(uint256,uint256,uint256,uint256)\":{\"notice\":\"primary entrypoint of funds into the system. users deposit with this function into the vault. The vault is then in charge of sending funds into the strategy. funds stay idle in the strategy until earn() is called on the strategy and valid parametersDeposits tokens in proportion to the vault's current holdings.\"},\"depositAVAXPair(uint256,uint256,uint256,uint256)\":{\"notice\":\"Alternative entry point into the strat. You can send native AVAX, and the vault will wrap them before depositing them into the strat.Deposits tokens in proportion to the vault's current holdings.\"},\"getUnderlyingAssets(uint256)\":{\"notice\":\"Gets the underlying assets in the vault i.e tokenX and tokenY includes all tokenX and tokenY idle in the strategy and supplied as liquidity\"},\"inCaseLBTokensGetStuck(address,uint256)\":{\"notice\":\"Rescues LB tokens funds stuck\"},\"inCaseTokensGetStuck(address)\":{\"notice\":\"Rescues funds stuck\"},\"setStrategyAddress(address)\":{\"notice\":\"Allows the vaults underlying strategy to be swapped out after first deploy\"},\"want()\":{\"notice\":\"returns the input tokens that may be deposited to this vault\"},\"withdraw(uint256)\":{\"notice\":\"primary exit point of funds from the system. users withdraw using this function.\"},\"withdrawAVAXPair(uint256)\":{\"notice\":\"alternative exitpoint of native funds from the system. People withdraw from this function.\"},\"withdrawAll()\":{\"notice\":\"a helper which will withdraw all of the users shares from the vault\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/LBVaultNative.sol\":\"LBVaultV1Native\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/LB-periph/JoeV2PeripheryErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../LB/LBErrors.sol\\\";\\n\\n/** LiquidityAmounts Errors */\\n\\nerror LiquidityAmounts__LengthMismatch();\",\"keccak256\":\"0x603e147ca1aa2ec3637096753ec722a58280f80b762bf13ae780b8ab5bdd213b\",\"license\":\"MIT\"},\"contracts/LB-periph/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../LB/libraries/Math512Bits.sol\\\";\\nimport \\\"../LB/libraries/BinHelper.sol\\\";\\nimport \\\"../LB/libraries/Constants.sol\\\";\\nimport \\\"../LB/libraries/SafeCast.sol\\\";\\nimport \\\"../LB/interfaces/ILBPair.sol\\\";\\nimport \\\"../LB/interfaces/ILBToken.sol\\\";\\n\\nimport \\\"./JoeV2PeripheryErrors.sol\\\";\\n\\n/// @title Liquidity Book periphery library for Liquidity Amount\\n/// @author Trader Joe\\n/// @notice Periphery library to help compute liquidity amounts from amounts and ids.\\n/// @dev The caller must ensure that the parameters are valid following the comments.\\nlibrary LiquidityAmounts {\\n    using Math512Bits for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Return the liquidities amounts received for a given amount of tokenX and tokenY\\n    /// @dev The caller needs to ensure that the ids are unique, if not, the result will be wrong.\\n    /// @param ids the list of ids where the user want to add liquidity\\n    /// @param binStep the binStep of the pair\\n    /// @param amountX the amount of tokenX\\n    /// @param amountY the amount of tokenY\\n    /// @return liquidities the amounts of liquidity received\\n    function getLiquiditiesForAmounts(\\n        uint256[] memory ids,\\n        uint16 binStep,\\n        uint112 amountX,\\n        uint112 amountY\\n    ) internal pure returns (uint256[] memory liquidities) {\\n        liquidities = new uint256[](ids.length);\\n\\n        for (uint256 i; i < ids.length; ++i) {\\n            uint256 price = BinHelper.getPriceFromId(ids[i].safe24(), binStep);\\n\\n            liquidities[i] = price.mulShiftRoundDown(amountX, Constants.SCALE_OFFSET) + amountY;\\n        }\\n    }\\n\\n    /// @notice Return the amounts of token received for a given amount of liquidities\\n    /// @dev The different arrays needs to use the same binId for each index\\n    /// @param liquidities the list of liquidity amounts for each binId\\n    /// @param totalSupplies the list of totalSupply for each binId\\n    /// @param binReservesX the list of reserve of token X for each binId\\n    /// @param binReservesY the list of reserve of token Y for each binId\\n    /// @return amountX the amount of tokenX received by the user\\n    /// @return amountY the amount of tokenY received by the user\\n    function getAmountsForLiquidities(\\n        uint256[] memory liquidities,\\n        uint256[] memory totalSupplies,\\n        uint112[] memory binReservesX,\\n        uint112[] memory binReservesY\\n    ) internal pure returns (uint256 amountX, uint256 amountY) {\\n        if (\\n            liquidities.length != totalSupplies.length &&\\n            liquidities.length != binReservesX.length &&\\n            liquidities.length != binReservesY.length\\n        ) revert LiquidityAmounts__LengthMismatch();\\n\\n        for (uint256 i; i < liquidities.length; ++i) {\\n            amountX += liquidities[i].mulDivRoundDown(binReservesX[i], totalSupplies[i]);\\n            amountY += liquidities[i].mulDivRoundDown(binReservesY[i], totalSupplies[i]);\\n        }\\n    }\\n\\n    /// @notice Return the ids and liquidities of an user\\n    /// @dev The caller needs to ensure that the ids are unique, if not, the result will be wrong.\\n    /// @param user The address of the user\\n    /// @param ids the list of ids where the user have liquidity\\n    /// @param LBPair The address of the LBPair\\n    /// @return liquidities the list of amount of liquidity of the user\\n    function getLiquiditiesOf(\\n        address user,\\n        uint256[] memory ids,\\n        address LBPair\\n    ) internal view returns (uint256[] memory liquidities) {\\n        liquidities = new uint256[](ids.length);\\n\\n        for (uint256 i; i < ids.length; ++i) {\\n            liquidities[i] = ILBToken(LBPair).balanceOf(user, ids[i].safe24());\\n        }\\n    }\\n\\n    /// @notice Return the amounts received by an user if he were to burn all its liquidity\\n    /// @dev The caller needs to ensure that the ids are unique, if not, the result will be wrong.\\n    /// @param user The address of the user\\n    /// @param ids the list of ids where the user would remove its liquidity, ids need to be in ascending order to assert uniqueness\\n    /// @param LBPair The address of the LBPair\\n    /// @return amountX the amount of tokenX received by the user\\n    /// @return amountY the amount of tokenY received by the user\\n    function getAmountsOf(\\n        address user,\\n        uint256[] memory ids,\\n        address LBPair\\n    ) internal view returns (uint256 amountX, uint256 amountY) {\\n        for (uint256 i; i < ids.length; ++i) {\\n            uint24 id = ids[i].safe24();\\n\\n            uint256 liquidity = ILBToken(LBPair).balanceOf(user, id);\\n            (uint256 binReserveX, uint256 binReserveY) = ILBPair(LBPair).getBin(id);\\n            uint256 totalSupply = ILBToken(LBPair).totalSupply(id);\\n\\n            amountX += liquidity.mulDivRoundDown(binReserveX, totalSupply);\\n            amountY += liquidity.mulDivRoundDown(binReserveY, totalSupply);\\n        }\\n    }\\n}\",\"keccak256\":\"0xeab33a46707895eab0591d26a735ce237f99a293770de1e01c0eef3bd2d08726\",\"license\":\"MIT\"},\"contracts/LB/LBErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/ILBPair.sol\\\";\\n\\n/** LBRouter errors */\\n\\nerror LBRouter__SenderIsNotWAVAX();\\nerror LBRouter__PairNotCreated(address tokenX, address tokenY, uint256 binStep);\\nerror LBRouter__WrongAmounts(uint256 amount, uint256 reserve);\\nerror LBRouter__SwapOverflows(uint256 id);\\nerror LBRouter__BrokenSwapSafetyCheck();\\nerror LBRouter__NotFactoryOwner();\\nerror LBRouter__TooMuchTokensIn(uint256 excess);\\nerror LBRouter__BinReserveOverflows(uint256 id);\\nerror LBRouter__IdOverflows(int256 id);\\nerror LBRouter__LengthsMismatch();\\nerror LBRouter__WrongTokenOrder();\\nerror LBRouter__IdSlippageCaught(uint256 activeIdDesired, uint256 idSlippage, uint256 activeId);\\nerror LBRouter__AmountSlippageCaught(uint256 amountXMin, uint256 amountX, uint256 amountYMin, uint256 amountY);\\nerror LBRouter__IdDesiredOverflows(uint256 idDesired, uint256 idSlippage);\\nerror LBRouter__FailedToSendAVAX(address recipient, uint256 amount);\\nerror LBRouter__DeadlineExceeded(uint256 deadline, uint256 currentTimestamp);\\nerror LBRouter__AmountSlippageBPTooBig(uint256 amountSlippage);\\nerror LBRouter__InsufficientAmountOut(uint256 amountOutMin, uint256 amountOut);\\nerror LBRouter__MaxAmountInExceeded(uint256 amountInMax, uint256 amountIn);\\nerror LBRouter__InvalidTokenPath(address wrongToken);\\nerror LBRouter__InvalidVersion(uint256 version);\\nerror LBRouter__WrongAvaxLiquidityParameters(\\n    address tokenX,\\n    address tokenY,\\n    uint256 amountX,\\n    uint256 amountY,\\n    uint256 msgValue\\n);\\n\\n/** LBToken errors */\\n\\nerror LBToken__SpenderNotApproved(address owner, address spender);\\nerror LBToken__TransferFromOrToAddress0();\\nerror LBToken__MintToAddress0();\\nerror LBToken__BurnFromAddress0();\\nerror LBToken__BurnExceedsBalance(address from, uint256 id, uint256 amount);\\nerror LBToken__LengthMismatch(uint256 accountsLength, uint256 idsLength);\\nerror LBToken__SelfApproval(address owner);\\nerror LBToken__TransferExceedsBalance(address from, uint256 id, uint256 amount);\\nerror LBToken__TransferToSelf();\\n\\n/** LBFactory errors */\\n\\nerror LBFactory__IdenticalAddresses(IERC20 token);\\nerror LBFactory__QuoteAssetNotWhitelisted(IERC20 quoteAsset);\\nerror LBFactory__QuoteAssetAlreadyWhitelisted(IERC20 quoteAsset);\\nerror LBFactory__AddressZero();\\nerror LBFactory__LBPairAlreadyExists(IERC20 tokenX, IERC20 tokenY, uint256 _binStep);\\nerror LBFactory__LBPairNotCreated(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\nerror LBFactory__DecreasingPeriods(uint16 filterPeriod, uint16 decayPeriod);\\nerror LBFactory__ReductionFactorOverflows(uint16 reductionFactor, uint256 max);\\nerror LBFactory__VariableFeeControlOverflows(uint16 variableFeeControl, uint256 max);\\nerror LBFactory__BaseFeesBelowMin(uint256 baseFees, uint256 minBaseFees);\\nerror LBFactory__FeesAboveMax(uint256 fees, uint256 maxFees);\\nerror LBFactory__FlashLoanFeeAboveMax(uint256 fees, uint256 maxFees);\\nerror LBFactory__BinStepRequirementsBreached(uint256 lowerBound, uint16 binStep, uint256 higherBound);\\nerror LBFactory__ProtocolShareOverflows(uint16 protocolShare, uint256 max);\\nerror LBFactory__FunctionIsLockedForUsers(address user);\\nerror LBFactory__FactoryLockIsAlreadyInTheSameState();\\nerror LBFactory__LBPairIgnoredIsAlreadyInTheSameState();\\nerror LBFactory__BinStepHasNoPreset(uint256 binStep);\\nerror LBFactory__SameFeeRecipient(address feeRecipient);\\nerror LBFactory__SameFlashLoanFee(uint256 flashLoanFee);\\nerror LBFactory__LBPairSafetyCheckFailed(address LBPairImplementation);\\nerror LBFactory__SameImplementation(address LBPairImplementation);\\nerror LBFactory__ImplementationNotSet();\\n\\n/** LBPair errors */\\n\\nerror LBPair__InsufficientAmounts();\\nerror LBPair__AddressZero();\\nerror LBPair__AddressZeroOrThis();\\nerror LBPair__CompositionFactorFlawed(uint256 id);\\nerror LBPair__InsufficientLiquidityMinted(uint256 id);\\nerror LBPair__InsufficientLiquidityBurned(uint256 id);\\nerror LBPair__WrongLengths();\\nerror LBPair__OnlyStrictlyIncreasingId();\\nerror LBPair__OnlyFactory();\\nerror LBPair__DistributionsOverflow();\\nerror LBPair__OnlyFeeRecipient(address feeRecipient, address sender);\\nerror LBPair__OracleNotEnoughSample();\\nerror LBPair__AlreadyInitialized();\\nerror LBPair__OracleNewSizeTooSmall(uint256 newSize, uint256 oracleSize);\\nerror LBPair__FlashLoanCallbackFailed();\\nerror LBPair__FlashLoanInvalidBalance();\\nerror LBPair__FlashLoanInvalidToken();\\n\\n/** BinHelper errors */\\n\\nerror BinHelper__BinStepOverflows(uint256 bp);\\nerror BinHelper__IdOverflows();\\n\\n/** Math128x128 errors */\\n\\nerror Math128x128__PowerUnderflow(uint256 x, int256 y);\\nerror Math128x128__LogUnderflow();\\n\\n/** Math512Bits errors */\\n\\nerror Math512Bits__MulDivOverflow(uint256 prod1, uint256 denominator);\\nerror Math512Bits__ShiftDivOverflow(uint256 prod1, uint256 denominator);\\nerror Math512Bits__MulShiftOverflow(uint256 prod1, uint256 offset);\\nerror Math512Bits__OffsetOverflows(uint256 offset);\\n\\n/** Oracle errors */\\n\\nerror Oracle__AlreadyInitialized(uint256 _index);\\nerror Oracle__LookUpTimestampTooOld(uint256 _minTimestamp, uint256 _lookUpTimestamp);\\nerror Oracle__NotInitialized();\\n\\n/** PendingOwnable errors */\\n\\nerror PendingOwnable__NotOwner();\\nerror PendingOwnable__NotPendingOwner();\\nerror PendingOwnable__PendingOwnerAlreadySet();\\nerror PendingOwnable__NoPendingOwner();\\nerror PendingOwnable__AddressZero();\\n\\n/** ReentrancyGuardUpgradeable errors */\\n\\nerror ReentrancyGuardUpgradeable__ReentrantCall();\\nerror ReentrancyGuardUpgradeable__AlreadyInitialized();\\n\\n/** SafeCast errors */\\n\\nerror SafeCast__Exceeds256Bits(uint256 x);\\nerror SafeCast__Exceeds248Bits(uint256 x);\\nerror SafeCast__Exceeds240Bits(uint256 x);\\nerror SafeCast__Exceeds232Bits(uint256 x);\\nerror SafeCast__Exceeds224Bits(uint256 x);\\nerror SafeCast__Exceeds216Bits(uint256 x);\\nerror SafeCast__Exceeds208Bits(uint256 x);\\nerror SafeCast__Exceeds200Bits(uint256 x);\\nerror SafeCast__Exceeds192Bits(uint256 x);\\nerror SafeCast__Exceeds184Bits(uint256 x);\\nerror SafeCast__Exceeds176Bits(uint256 x);\\nerror SafeCast__Exceeds168Bits(uint256 x);\\nerror SafeCast__Exceeds160Bits(uint256 x);\\nerror SafeCast__Exceeds152Bits(uint256 x);\\nerror SafeCast__Exceeds144Bits(uint256 x);\\nerror SafeCast__Exceeds136Bits(uint256 x);\\nerror SafeCast__Exceeds128Bits(uint256 x);\\nerror SafeCast__Exceeds120Bits(uint256 x);\\nerror SafeCast__Exceeds112Bits(uint256 x);\\nerror SafeCast__Exceeds104Bits(uint256 x);\\nerror SafeCast__Exceeds96Bits(uint256 x);\\nerror SafeCast__Exceeds88Bits(uint256 x);\\nerror SafeCast__Exceeds80Bits(uint256 x);\\nerror SafeCast__Exceeds72Bits(uint256 x);\\nerror SafeCast__Exceeds64Bits(uint256 x);\\nerror SafeCast__Exceeds56Bits(uint256 x);\\nerror SafeCast__Exceeds48Bits(uint256 x);\\nerror SafeCast__Exceeds40Bits(uint256 x);\\nerror SafeCast__Exceeds32Bits(uint256 x);\\nerror SafeCast__Exceeds24Bits(uint256 x);\\nerror SafeCast__Exceeds16Bits(uint256 x);\\nerror SafeCast__Exceeds8Bits(uint256 x);\\n\\n/** TreeMath errors */\\n\\nerror TreeMath__ErrorDepthSearch();\\n\\n/** JoeLibrary errors */\\n\\nerror JoeLibrary__IdenticalAddresses();\\nerror JoeLibrary__AddressZero();\\nerror JoeLibrary__InsufficientAmount();\\nerror JoeLibrary__InsufficientLiquidity();\\n\\n/** TokenHelper errors */\\n\\nerror TokenHelper__NonContract();\\nerror TokenHelper__CallFailed();\\nerror TokenHelper__TransferFailed();\\n\\n/** LBQuoter errors */\\n\\nerror LBQuoter_InvalidLength();\",\"keccak256\":\"0xf286f93d0be2d9f44dcf074cd491d95c8e7ef5b8698cdb7c1b142ab60869e365\",\"license\":\"MIT\"},\"contracts/LB/interfaces/ILBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./ILBPair.sol\\\";\\nimport \\\"./IPendingOwnable.sol\\\";\\n\\n/// @title Liquidity Book Factory Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBFactory contract\\ninterface ILBFactory is IPendingOwnable {\\n    /// @dev Structure to store the LBPair information, such as:\\n    /// - binStep: The bin step of the LBPair\\n    /// - LBPair: The address of the LBPair\\n    /// - createdByOwner: Whether the pair was created by the owner of the factory\\n    /// - ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n}\",\"keccak256\":\"0x483974bedf0a6b3cb5dac3b4b953b5f2520fa5772854593922ce81dfd0abe70c\",\"license\":\"MIT\"},\"contracts/LB/interfaces/ILBFlashLoanCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Liquidity Book Flashloan Callback Interface\\n/// @author Trader Joe\\n/// @notice Required interface to interact with LB flash loans\\ninterface ILBFlashLoanCallback {\\n    function LBFlashLoanCallback(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\",\"keccak256\":\"0x7ae96dfc12e2eb70ef473e29a257f537f1202a22fd9555a785729db43c6462a3\",\"license\":\"MIT\"},\"contracts/LB/interfaces/ILBPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../libraries/FeeHelper.sol\\\";\\nimport \\\"./ILBFactory.sol\\\";\\nimport \\\"./ILBFlashLoanCallback.sol\\\";\\n\\n/// @title Liquidity Book Pair Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBPair contract\\ninterface ILBPair {\\n    /// @dev Structure to store the reserves of bins:\\n    /// - reserveX: The current reserve of tokenX of the bin\\n    /// - reserveY: The current reserve of tokenY of the bin\\n    struct Bin {\\n        uint112 reserveX;\\n        uint112 reserveY;\\n        uint256 accTokenXPerShare;\\n        uint256 accTokenYPerShare;\\n    }\\n\\n    /// @dev Structure to store the information of the pair such as:\\n    /// slot0:\\n    /// - activeId: The current id used for swaps, this is also linked with the price\\n    /// - reserveX: The sum of amounts of tokenX across all bins\\n    /// slot1:\\n    /// - reserveY: The sum of amounts of tokenY across all bins\\n    /// - oracleSampleLifetime: The lifetime of an oracle sample\\n    /// - oracleSize: The current size of the oracle, can be increase by users\\n    /// - oracleActiveSize: The current active size of the oracle, composed only from non empty data sample\\n    /// - oracleLastTimestamp: The current last timestamp at which a sample was added to the circular buffer\\n    /// - oracleId: The current id of the oracle\\n    /// slot2:\\n    /// - feesX: The current amount of fees to distribute in tokenX (total, protocol)\\n    /// slot3:\\n    /// - feesY: The current amount of fees to distribute in tokenY (total, protocol)\\n    struct PairInformation {\\n        uint24 activeId;\\n        uint136 reserveX;\\n        uint136 reserveY;\\n        uint16 oracleSampleLifetime;\\n        uint16 oracleSize;\\n        uint16 oracleActiveSize;\\n        uint40 oracleLastTimestamp;\\n        uint16 oracleId;\\n        FeeHelper.FeesDistribution feesX;\\n        FeeHelper.FeesDistribution feesY;\\n    }\\n\\n    /// @dev Structure to store the debts of users\\n    /// - debtX: The tokenX's debt\\n    /// - debtY: The tokenY's debt\\n    struct Debts {\\n        uint256 debtX;\\n        uint256 debtY;\\n    }\\n\\n    /// @dev Structure to store fees:\\n    /// - tokenX: The amount of fees of token X\\n    /// - tokenY: The amount of fees of token Y\\n    struct Fees {\\n        uint128 tokenX;\\n        uint128 tokenY;\\n    }\\n\\n    /// @dev Structure to minting informations:\\n    /// - amountXIn: The amount of token X sent\\n    /// - amountYIn: The amount of token Y sent\\n    /// - amountXAddedToPair: The amount of token X that have been actually added to the pair\\n    /// - amountYAddedToPair: The amount of token Y that have been actually added to the pair\\n    /// - activeFeeX: Fees X currently generated\\n    /// - activeFeeY: Fees Y currently generated\\n    /// - totalDistributionX: Total distribution of token X. Should be 1e18 (100%) or 0 (0%)\\n    /// - totalDistributionY: Total distribution of token Y. Should be 1e18 (100%) or 0 (0%)\\n    /// - id: Id of the current working bin when looping on the distribution array\\n    /// - amountX: The amount of token X deposited in the current bin\\n    /// - amountY: The amount of token Y deposited in the current bin\\n    /// - distributionX: Distribution of token X for the current working bin\\n    /// - distributionY: Distribution of token Y for the current working bin\\n    struct MintInfo {\\n        uint256 amountXIn;\\n        uint256 amountYIn;\\n        uint256 amountXAddedToPair;\\n        uint256 amountYAddedToPair;\\n        uint256 activeFeeX;\\n        uint256 activeFeeY;\\n        uint256 totalDistributionX;\\n        uint256 totalDistributionY;\\n        uint256 id;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 distributionX;\\n        uint256 distributionY;\\n    }\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        bool swapForY,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 volatilityAccumulated,\\n        uint256 fees\\n    );\\n\\n    event FlashLoan(\\n        address indexed sender,\\n        ILBFlashLoanCallback indexed receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    event CompositionFee(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        uint256 feesX,\\n        uint256 feesY\\n    );\\n\\n    event DepositedToBin(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    event WithdrawnFromBin(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    event FeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event ProtocolFeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event OracleSizeIncreased(uint256 previousSize, uint256 newSize);\\n\\n    function tokenX() external view returns (IERC20);\\n\\n    function tokenY() external view returns (IERC20);\\n\\n    function factory() external view returns (ILBFactory);\\n\\n    function getReservesAndId()\\n        external\\n        view\\n        returns (\\n            uint256 reserveX,\\n            uint256 reserveY,\\n            uint256 activeId\\n        );\\n\\n    function getGlobalFees()\\n        external\\n        view\\n        returns (\\n            uint128 feesXTotal,\\n            uint128 feesYTotal,\\n            uint128 feesXProtocol,\\n            uint128 feesYProtocol\\n        );\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (\\n            uint256 oracleSampleLifetime,\\n            uint256 oracleSize,\\n            uint256 oracleActiveSize,\\n            uint256 oracleLastTimestamp,\\n            uint256 oracleId,\\n            uint256 min,\\n            uint256 max\\n        );\\n\\n    function getOracleSampleFrom(uint256 timeDelta)\\n        external\\n        view\\n        returns (\\n            uint256 cumulativeId,\\n            uint256 cumulativeAccumulator,\\n            uint256 cumulativeBinCrossed\\n        );\\n\\n    function feeParameters() external view returns (FeeHelper.FeeParameters memory);\\n\\n    function findFirstNonEmptyBinId(uint24 id_, bool sentTokenY) external view returns (uint24 id);\\n\\n    function getBin(uint24 id) external view returns (uint256 reserveX, uint256 reserveY);\\n\\n    function pendingFees(address account, uint256[] memory ids)\\n        external\\n        view\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function swap(bool sentTokenY, address to) external returns (uint256 amountXOut, uint256 amountYOut);\\n\\n    function flashLoan(\\n        ILBFlashLoanCallback receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mint(\\n        uint256[] calldata ids,\\n        uint256[] calldata distributionX,\\n        uint256[] calldata distributionY,\\n        address to\\n    )\\n        external\\n        returns (\\n            uint256 amountXAddedToPair,\\n            uint256 amountYAddedToPair,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function burn(\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        address to\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function increaseOracleLength(uint16 newSize) external;\\n\\n    function collectFees(address account, uint256[] calldata ids) external returns (uint256 amountX, uint256 amountY);\\n\\n    function collectProtocolFees() external returns (uint128 amountX, uint128 amountY);\\n\\n    function setFeesParameters(bytes32 packedFeeParameters) external;\\n\\n    function forceDecay() external;\\n\\n    function initialize(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint24 activeId,\\n        uint16 sampleLifetime,\\n        bytes32 packedFeeParameters\\n    ) external;\\n}\",\"keccak256\":\"0x4e664df355fa6ccf99dd5bcad1c4cf67b37cd5e8a810c76e8f78fd54da7d8cf8\",\"license\":\"MIT\"},\"contracts/LB/interfaces/ILBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title Liquidity Book Token Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBToken contract\\ninterface ILBToken is IERC165 {\\n    event TransferSingle(address indexed sender, address indexed from, address indexed to, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory batchBalances);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function setApprovalForAll(address sender, bool approved) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata id,\\n        uint256[] calldata amount\\n    ) external;\\n}\",\"keccak256\":\"0x9fc8f79347f6c7770307290587ff278da7efd10ec3e02508f8bd59966ff79f65\",\"license\":\"MIT\"},\"contracts/LB/interfaces/IPendingOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title Liquidity Book Pending Ownable Interface\\n/// @author Trader Joe\\n/// @notice Required interface of Pending Ownable contract used for LBFactory\\ninterface IPendingOwnable {\\n    event PendingOwnerSet(address indexed pendingOwner);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\",\"keccak256\":\"0xb9ba5f574dd5269931e67bab2c34125c803ed1c4908a79ea86d7e6394aa8db73\",\"license\":\"MIT\"},\"contracts/LB/libraries/BinHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../LBErrors.sol\\\";\\nimport \\\"./Math128x128.sol\\\";\\n\\n/// @title Liquidity Book Bin Helper Library\\n/// @author Trader Joe\\n/// @notice Contract used to convert bin ID to price and back\\nlibrary BinHelper {\\n    using Math128x128 for uint256;\\n\\n    int256 private constant REAL_ID_SHIFT = 1 << 23;\\n\\n    /// @notice Returns the id corresponding to the given price\\n    /// @dev The id may be inaccurate due to rounding issues, always trust getPriceFromId rather than\\n    /// getIdFromPrice\\n    /// @param _price The price of y per x as a 128.128-binary fixed-point number\\n    /// @param _binStep The bin step\\n    /// @return The id corresponding to this price\\n    function getIdFromPrice(uint256 _price, uint256 _binStep) internal pure returns (uint24) {\\n        unchecked {\\n            uint256 _binStepValue = _getBPValue(_binStep);\\n\\n            // can't overflow as `2**23 + log2(price) < 2**23 + 2**128 < max(uint256)`\\n            int256 _id = REAL_ID_SHIFT + _price.log2() / _binStepValue.log2();\\n\\n            if (_id < 0 || uint256(_id) > type(uint24).max) revert BinHelper__IdOverflows();\\n            return uint24(uint256(_id));\\n        }\\n    }\\n\\n    /// @notice Returns the price corresponding to the given ID, as a 128.128-binary fixed-point number\\n    /// @dev This is the trusted function to link id to price, the other way may be inaccurate\\n    /// @param _id The id\\n    /// @param _binStep The bin step\\n    /// @return The price corresponding to this id, as a 128.128-binary fixed-point number\\n    function getPriceFromId(uint256 _id, uint256 _binStep) internal pure returns (uint256) {\\n        if (_id > uint256(type(uint24).max)) revert BinHelper__IdOverflows();\\n        unchecked {\\n            int256 _realId = int256(_id) - REAL_ID_SHIFT;\\n\\n            return _getBPValue(_binStep).power(_realId);\\n        }\\n    }\\n\\n    /// @notice Returns the (1 + bp) value as a 128.128-decimal fixed-point number\\n    /// @param _binStep The bp value in [1; 100] (referring to 0.01% to 1%)\\n    /// @return The (1+bp) value as a 128.128-decimal fixed-point number\\n    function _getBPValue(uint256 _binStep) internal pure returns (uint256) {\\n        if (_binStep == 0 || _binStep > Constants.BASIS_POINT_MAX) revert BinHelper__BinStepOverflows(_binStep);\\n\\n        unchecked {\\n            // can't overflow as `max(result) = 2**128 + 10_000 << 128 / 10_000 < max(uint256)`\\n            return Constants.SCALE + (_binStep << Constants.SCALE_OFFSET) / Constants.BASIS_POINT_MAX;\\n        }\\n    }\\n}\",\"keccak256\":\"0xb3468e4d4e329a728c1df36d62d895663a6a283287adc3a0e867aaa63d1af8bc\",\"license\":\"MIT\"},\"contracts/LB/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title Liquidity Book Bit Math Library\\n/// @author Trader Joe\\n/// @notice Helper contract used for bit calculations\\nlibrary BitMath {\\n    /// @notice Returns the closest non-zero bit of `integer` to the right (of left) of the `bit` bits that is not `bit`\\n    /// @param _integer The integer as a uint256\\n    /// @param _bit The bit index\\n    /// @param _rightSide Whether we're searching in the right side of the tree (true) or the left side (false)\\n    /// @return The index of the closest non-zero bit. If there is no closest bit, it returns max(uint256)\\n    function closestBit(\\n        uint256 _integer,\\n        uint8 _bit,\\n        bool _rightSide\\n    ) internal pure returns (uint256) {\\n        return _rightSide ? closestBitRight(_integer, _bit - 1) : closestBitLeft(_integer, _bit + 1);\\n    }\\n\\n    /// @notice Returns the most (or least) significant bit of `_integer`\\n    /// @param _integer The integer\\n    /// @param _isMostSignificant Whether we want the most (true) or the least (false) significant bit\\n    /// @return The index of the most (or least) significant bit\\n    function significantBit(uint256 _integer, bool _isMostSignificant) internal pure returns (uint8) {\\n        return _isMostSignificant ? mostSignificantBit(_integer) : leastSignificantBit(_integer);\\n    }\\n\\n    /// @notice Returns the index of the closest bit on the right of x that is non null\\n    /// @param x The value as a uint256\\n    /// @param bit The index of the bit to start searching at\\n    /// @return id The index of the closest non null bit on the right of x.\\n    /// If there is no closest bit, it returns max(uint256)\\n    function closestBitRight(uint256 x, uint8 bit) internal pure returns (uint256 id) {\\n        unchecked {\\n            uint256 _shift = 255 - bit;\\n            x <<= _shift;\\n\\n            // can't overflow as it's non-zero and we shifted it by `_shift`\\n            return (x == 0) ? type(uint256).max : mostSignificantBit(x) - _shift;\\n        }\\n    }\\n\\n    /// @notice Returns the index of the closest bit on the left of x that is non null\\n    /// @param x The value as a uint256\\n    /// @param bit The index of the bit to start searching at\\n    /// @return id The index of the closest non null bit on the left of x.\\n    /// If there is no closest bit, it returns max(uint256)\\n    function closestBitLeft(uint256 x, uint8 bit) internal pure returns (uint256 id) {\\n        unchecked {\\n            x >>= bit;\\n\\n            return (x == 0) ? type(uint256).max : leastSignificantBit(x) + bit;\\n        }\\n    }\\n\\n    /// @notice Returns the index of the most significant bit of x\\n    /// @param x The value as a uint256\\n    /// @return msb The index of the most significant bit of x\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 msb) {\\n        unchecked {\\n            if (x >= 1 << 128) {\\n                x >>= 128;\\n                msb = 128;\\n            }\\n            if (x >= 1 << 64) {\\n                x >>= 64;\\n                msb += 64;\\n            }\\n            if (x >= 1 << 32) {\\n                x >>= 32;\\n                msb += 32;\\n            }\\n            if (x >= 1 << 16) {\\n                x >>= 16;\\n                msb += 16;\\n            }\\n            if (x >= 1 << 8) {\\n                x >>= 8;\\n                msb += 8;\\n            }\\n            if (x >= 1 << 4) {\\n                x >>= 4;\\n                msb += 4;\\n            }\\n            if (x >= 1 << 2) {\\n                x >>= 2;\\n                msb += 2;\\n            }\\n            if (x >= 1 << 1) {\\n                msb += 1;\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of x\\n    /// @param x The value as a uint256\\n    /// @return lsb The index of the least significant bit of x\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 lsb) {\\n        unchecked {\\n            if (x << 128 != 0) {\\n                x <<= 128;\\n                lsb = 128;\\n            }\\n            if (x << 64 != 0) {\\n                x <<= 64;\\n                lsb += 64;\\n            }\\n            if (x << 32 != 0) {\\n                x <<= 32;\\n                lsb += 32;\\n            }\\n            if (x << 16 != 0) {\\n                x <<= 16;\\n                lsb += 16;\\n            }\\n            if (x << 8 != 0) {\\n                x <<= 8;\\n                lsb += 8;\\n            }\\n            if (x << 4 != 0) {\\n                x <<= 4;\\n                lsb += 4;\\n            }\\n            if (x << 2 != 0) {\\n                x <<= 2;\\n                lsb += 2;\\n            }\\n            if (x << 1 != 0) {\\n                lsb += 1;\\n            }\\n\\n            return 255 - lsb;\\n        }\\n    }\\n}\",\"keccak256\":\"0x976ff97349fac5c6ad4f46cc44fda06960ecc95eafc4e14c8f60b5ba6822bc09\",\"license\":\"MIT\"},\"contracts/LB/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title Liquidity Book Constants Library\\n/// @author Trader Joe\\n/// @notice Set of constants for Liquidity Book contracts\\nlibrary Constants {\\n    uint256 internal constant SCALE_OFFSET = 128;\\n    uint256 internal constant SCALE = 1 << SCALE_OFFSET;\\n\\n    uint256 internal constant PRECISION = 1e18;\\n    uint256 internal constant BASIS_POINT_MAX = 10_000;\\n\\n    /// @dev The expected return after a successful flash loan\\n    bytes32 internal constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n}\",\"keccak256\":\"0x5c62462c525872087001378db2d8f79428e816255960f26cf3bc9c38bec7b18c\",\"license\":\"MIT\"},\"contracts/LB/libraries/FeeHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/// @title Liquidity Book Fee Helper Library\\n/// @author Trader Joe\\n/// @notice Helper contract used for fees calculation\\nlibrary FeeHelper {\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n\\n    /// @dev Structure to store the protocol fees:\\n    /// - binStep: The bin step\\n    /// - baseFactor: The base factor\\n    /// - filterPeriod: The filter period, where the fees stays constant\\n    /// - decayPeriod: The decay period, where the fees are halved\\n    /// - reductionFactor: The reduction factor, used to calculate the reduction of the accumulator\\n    /// - variableFeeControl: The variable fee control, used to control the variable fee, can be 0 to disable them\\n    /// - protocolShare: The share of fees sent to protocol\\n    /// - maxVolatilityAccumulated: The max value of volatility accumulated\\n    /// - volatilityAccumulated: The value of volatility accumulated\\n    /// - volatilityReference: The value of volatility reference\\n    /// - indexRef: The index reference\\n    /// - time: The last time the accumulator was called\\n    struct FeeParameters {\\n        // 144 lowest bits in slot\\n        uint16 binStep;\\n        uint16 baseFactor;\\n        uint16 filterPeriod;\\n        uint16 decayPeriod;\\n        uint16 reductionFactor;\\n        uint24 variableFeeControl;\\n        uint16 protocolShare;\\n        uint24 maxVolatilityAccumulated;\\n        // 112 highest bits in slot\\n        uint24 volatilityAccumulated;\\n        uint24 volatilityReference;\\n        uint24 indexRef;\\n        uint40 time;\\n    }\\n\\n    /// @dev Structure used during swaps to distributes the fees:\\n    /// - total: The total amount of fees\\n    /// - protocol: The amount of fees reserved for protocol\\n    struct FeesDistribution {\\n        uint128 total;\\n        uint128 protocol;\\n    }\\n\\n    /// @notice Update the value of the volatility accumulated\\n    /// @param _fp The current fee parameters\\n    /// @param _activeId The current active id\\n    function updateVariableFeeParameters(FeeParameters memory _fp, uint256 _activeId) internal view {\\n        uint256 _deltaT = block.timestamp - _fp.time;\\n\\n        if (_deltaT >= _fp.filterPeriod || _fp.time == 0) {\\n            _fp.indexRef = uint24(_activeId);\\n            if (_deltaT < _fp.decayPeriod) {\\n                unchecked {\\n                    // This can't overflow as `reductionFactor <= BASIS_POINT_MAX`\\n                    _fp.volatilityReference = uint24(\\n                        (uint256(_fp.reductionFactor) * _fp.volatilityAccumulated) / Constants.BASIS_POINT_MAX\\n                    );\\n                }\\n            } else {\\n                _fp.volatilityReference = 0;\\n            }\\n        }\\n\\n        _fp.time = (block.timestamp).safe40();\\n\\n        updateVolatilityAccumulated(_fp, _activeId);\\n    }\\n\\n    /// @notice Update the volatility accumulated\\n    /// @param _fp The fee parameter\\n    /// @param _activeId The current active id\\n    function updateVolatilityAccumulated(FeeParameters memory _fp, uint256 _activeId) internal pure {\\n        uint256 volatilityAccumulated = (_activeId.absSub(_fp.indexRef) * Constants.BASIS_POINT_MAX) +\\n            _fp.volatilityReference;\\n        _fp.volatilityAccumulated = volatilityAccumulated > _fp.maxVolatilityAccumulated\\n            ? _fp.maxVolatilityAccumulated\\n            : uint24(volatilityAccumulated);\\n    }\\n\\n    /// @notice Returns the base fee added to a swap, with 18 decimals\\n    /// @param _fp The current fee parameters\\n    /// @return The fee with 18 decimals precision\\n    function getBaseFee(FeeParameters memory _fp) internal pure returns (uint256) {\\n        unchecked {\\n            return uint256(_fp.baseFactor) * _fp.binStep * 1e10;\\n        }\\n    }\\n\\n    /// @notice Returns the variable fee added to a swap, with 18 decimals\\n    /// @param _fp The current fee parameters\\n    /// @return variableFee The variable fee with 18 decimals precision\\n    function getVariableFee(FeeParameters memory _fp) internal pure returns (uint256 variableFee) {\\n        if (_fp.variableFeeControl != 0) {\\n            // Can't overflow as the max value is `max(uint24) * (max(uint24) * max(uint16)) ** 2 < max(uint104)`\\n            // It returns 18 decimals as:\\n            // decimals(variableFeeControl * (volatilityAccumulated * binStep)**2 / 100) = 4 + (4 + 4) * 2 - 2 = 18\\n            unchecked {\\n                uint256 _prod = uint256(_fp.volatilityAccumulated) * _fp.binStep;\\n                variableFee = (_prod * _prod * _fp.variableFeeControl + 99) / 100;\\n            }\\n        }\\n    }\\n\\n    /// @notice Return the amount of fees from an amount\\n    /// @dev Rounds amount up, follows `amount = amountWithFees - getFeeAmountFrom(fp, amountWithFees)`\\n    /// @param _fp The current fee parameter\\n    /// @param _amountWithFees The amount of token sent\\n    /// @return The fee amount from the amount sent\\n    function getFeeAmountFrom(FeeParameters memory _fp, uint256 _amountWithFees) internal pure returns (uint256) {\\n        return (_amountWithFees * getTotalFee(_fp) + Constants.PRECISION - 1) / (Constants.PRECISION);\\n    }\\n\\n    /// @notice Return the fees to add to an amount\\n    /// @dev Rounds amount up, follows `amountWithFees = amount + getFeeAmount(fp, amount)`\\n    /// @param _fp The current fee parameter\\n    /// @param _amount The amount of token sent\\n    /// @return The fee amount to add to the amount\\n    function getFeeAmount(FeeParameters memory _fp, uint256 _amount) internal pure returns (uint256) {\\n        uint256 _fee = getTotalFee(_fp);\\n        uint256 _denominator = Constants.PRECISION - _fee;\\n        return (_amount * _fee + _denominator - 1) / _denominator;\\n    }\\n\\n    /// @notice Return the fees added when an user adds liquidity and change the ratio in the active bin\\n    /// @dev Rounds amount up\\n    /// @param _fp The current fee parameter\\n    /// @param _amountWithFees The amount of token sent\\n    /// @return The fee amount\\n    function getFeeAmountForC(FeeParameters memory _fp, uint256 _amountWithFees) internal pure returns (uint256) {\\n        uint256 _fee = getTotalFee(_fp);\\n        uint256 _denominator = Constants.PRECISION * Constants.PRECISION;\\n        return (_amountWithFees * _fee * (_fee + Constants.PRECISION) + _denominator - 1) / _denominator;\\n    }\\n\\n    /// @notice Return the fees distribution added to an amount\\n    /// @param _fp The current fee parameter\\n    /// @param _fees The fee amount\\n    /// @return fees The fee distribution\\n    function getFeeAmountDistribution(FeeParameters memory _fp, uint256 _fees)\\n        internal\\n        pure\\n        returns (FeesDistribution memory fees)\\n    {\\n        fees.total = _fees.safe128();\\n        // unsafe math is fine because total >= protocol\\n        unchecked {\\n            fees.protocol = uint128((_fees * _fp.protocolShare) / Constants.BASIS_POINT_MAX);\\n        }\\n    }\\n\\n    /// @notice Return the total fee, i.e. baseFee + variableFee\\n    /// @param _fp The current fee parameter\\n    /// @return The total fee, with 18 decimals\\n    function getTotalFee(FeeParameters memory _fp) private pure returns (uint256) {\\n        unchecked {\\n            return getBaseFee(_fp) + getVariableFee(_fp);\\n        }\\n    }\\n}\",\"keccak256\":\"0x47652174aab7269a8b1ecd334ae502e782958e0fe9a7188d36dacbd82dbe26a1\",\"license\":\"MIT\"},\"contracts/LB/libraries/Math128x128.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../LBErrors.sol\\\";\\nimport \\\"./BitMath.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./Math512Bits.sol\\\";\\n\\n/// @title Liquidity Book Math Helper Library\\n/// @author Trader Joe\\n/// @notice Helper contract used for power and log calculations\\nlibrary Math128x128 {\\n    using Math512Bits for uint256;\\n    using BitMath for uint256;\\n\\n    uint256 constant LOG_SCALE_OFFSET = 127;\\n    uint256 constant LOG_SCALE = 1 << LOG_SCALE_OFFSET;\\n    uint256 constant LOG_SCALE_SQUARED = LOG_SCALE * LOG_SCALE;\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation\\n    /// Also because x is converted to an unsigned 129.127-binary fixed-point number during the operation to optimize the multiplication\\n    ///\\n    /// @param x The unsigned 128.128-binary fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 128.128-binary fixed-point number.\\n    function log2(uint256 x) internal pure returns (int256 result) {\\n        // Convert x to a unsigned 129.127-binary fixed-point number to optimize the multiplication.\\n        // If we use an offset of 128 bits, y would need 129 bits and y**2 would would overflow and we would have to\\n        // use mulDiv, by reducing x to 129.127-binary fixed-point number we assert that y will use 128 bits, and we\\n        // can use the regular multiplication\\n\\n        if (x == 1) return -128;\\n        if (x == 0) revert Math128x128__LogUnderflow();\\n\\n        x >>= 1;\\n\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= LOG_SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas\\n                x = LOG_SCALE_SQUARED / x;\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = (x >> LOG_SCALE_OFFSET).mostSignificantBit();\\n\\n            // The integer part of the logarithm as a signed 129.127-binary fixed-point number. The operation can't overflow\\n            // because n is maximum 255, LOG_SCALE_OFFSET is 127 bits and sign is either 1 or -1.\\n            result = int256(n) << LOG_SCALE_OFFSET;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y != LOG_SCALE) {\\n                // Calculate the fractional part via the iterative approximation.\\n                // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n                for (int256 delta = int256(1 << (LOG_SCALE_OFFSET - 1)); delta > 0; delta >>= 1) {\\n                    y = (y * y) >> LOG_SCALE_OFFSET;\\n\\n                    // Is y^2 > 2 and so in the range [2,4)?\\n                    if (y >= 1 << (LOG_SCALE_OFFSET + 1)) {\\n                        // Add the 2^(-m) factor to the logarithm.\\n                        result += delta;\\n\\n                        // Corresponds to z/2 on Wikipedia.\\n                        y >>= 1;\\n                    }\\n                }\\n            }\\n            // Convert x back to unsigned 128.128-binary fixed-point number\\n            result = (result * sign) << 1;\\n        }\\n    }\\n\\n    /// @notice Returns the value of x^y. It calculates `1 / x^abs(y)` if x is bigger than 2^128.\\n    /// At the end of the operations, we invert the result if needed.\\n    /// @param x The unsigned 128.128-binary fixed-point number for which to calculate the power\\n    /// @param y A relative number without any decimals, needs to be between ]2^20; 2^20[\\n    /// @return result The result of `x^y`\\n    function power(uint256 x, int256 y) internal pure returns (uint256 result) {\\n        bool invert;\\n        uint256 absY;\\n\\n        if (y == 0) return Constants.SCALE;\\n\\n        assembly {\\n            absY := y\\n            if slt(absY, 0) {\\n                absY := sub(0, absY)\\n                invert := iszero(invert)\\n            }\\n        }\\n\\n        if (absY < 0x100000) {\\n            result = Constants.SCALE;\\n            assembly {\\n                let pow := x\\n                if gt(x, 0xffffffffffffffffffffffffffffffff) {\\n                    pow := div(not(0), pow)\\n                    invert := iszero(invert)\\n                }\\n\\n                if and(absY, 0x1) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x2) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x4) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x8) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x10) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x20) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x40) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x80) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x100) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x200) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x400) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x800) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x1000) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x2000) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x4000) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x8000) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x10000) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x20000) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x40000) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n                pow := shr(128, mul(pow, pow))\\n                if and(absY, 0x80000) {\\n                    result := shr(128, mul(result, pow))\\n                }\\n            }\\n        }\\n\\n        // revert if y is too big or if x^y underflowed\\n        if (result == 0) revert Math128x128__PowerUnderflow(x, y);\\n\\n        return invert ? type(uint256).max / result : result;\\n    }\\n}\",\"keccak256\":\"0x5dd32ba0d0c00cf1f9d9c560a6ad24b5dbf4fc34bac9fcb062f3c007f1b729dd\",\"license\":\"MIT\"},\"contracts/LB/libraries/Math512Bits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../LBErrors.sol\\\";\\nimport \\\"./BitMath.sol\\\";\\n\\n/// @title Liquidity Book Math Helper Library\\n/// @author Trader Joe\\n/// @notice Helper contract used for full precision calculations\\nlibrary Math512Bits {\\n    using BitMath for uint256;\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision\\n    /// The result will be rounded down\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero\\n    /// - The result must fit within uint256\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers\\n    ///\\n    /// @param x The multiplicand as an uint256\\n    /// @param y The multiplier as an uint256\\n    /// @param denominator The divisor as an uint256\\n    /// @return result The result as an uint256\\n    function mulDivRoundDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\\n\\n        return _getEndOfDivRoundDown(x, y, denominator, prod0, prod1);\\n    }\\n\\n    /// @notice Calculates x * y >> offset with full precision\\n    /// The result will be rounded down\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    ///\\n    /// Requirements:\\n    /// - The offset needs to be strictly lower than 256\\n    /// - The result must fit within uint256\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers\\n    ///\\n    /// @param x The multiplicand as an uint256\\n    /// @param y The multiplier as an uint256\\n    /// @param offset The offset as an uint256, can't be greater than 256\\n    /// @return result The result as an uint256\\n    function mulShiftRoundDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 offset\\n    ) internal pure returns (uint256 result) {\\n        if (offset > 255) revert Math512Bits__OffsetOverflows(offset);\\n\\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\\n\\n        if (prod0 != 0) result = prod0 >> offset;\\n        if (prod1 != 0) {\\n            // Make sure the result is less than 2^256.\\n            if (prod1 >= 1 << offset) revert Math512Bits__MulShiftOverflow(prod1, offset);\\n\\n            unchecked {\\n                result += prod1 << (256 - offset);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates x * y >> offset with full precision\\n    /// The result will be rounded up\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    ///\\n    /// Requirements:\\n    /// - The offset needs to be strictly lower than 256\\n    /// - The result must fit within uint256\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers\\n    ///\\n    /// @param x The multiplicand as an uint256\\n    /// @param y The multiplier as an uint256\\n    /// @param offset The offset as an uint256, can't be greater than 256\\n    /// @return result The result as an uint256\\n    function mulShiftRoundUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 offset\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulShiftRoundDown(x, y, offset);\\n            if (mulmod(x, y, 1 << offset) != 0) result += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates x << offset / y with full precision\\n    /// The result will be rounded down\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    ///\\n    /// Requirements:\\n    /// - The offset needs to be strictly lower than 256\\n    /// - The result must fit within uint256\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers\\n    ///\\n    /// @param x The multiplicand as an uint256\\n    /// @param offset The number of bit to shift x as an uint256\\n    /// @param denominator The divisor as an uint256\\n    /// @return result The result as an uint256\\n    function shiftDivRoundDown(\\n        uint256 x,\\n        uint256 offset,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        if (offset > 255) revert Math512Bits__OffsetOverflows(offset);\\n        uint256 prod0;\\n        uint256 prod1;\\n\\n        prod0 = x << offset; // Least significant 256 bits of the product\\n        unchecked {\\n            prod1 = x >> (256 - offset); // Most significant 256 bits of the product\\n        }\\n\\n        return _getEndOfDivRoundDown(x, 1 << offset, denominator, prod0, prod1);\\n    }\\n\\n    /// @notice Calculates x << offset / y with full precision\\n    /// The result will be rounded up\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    ///\\n    /// Requirements:\\n    /// - The offset needs to be strictly lower than 256\\n    /// - The result must fit within uint256\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers\\n    ///\\n    /// @param x The multiplicand as an uint256\\n    /// @param offset The number of bit to shift x as an uint256\\n    /// @param denominator The divisor as an uint256\\n    /// @return result The result as an uint256\\n    function shiftDivRoundUp(\\n        uint256 x,\\n        uint256 offset,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = shiftDivRoundDown(x, offset, denominator);\\n        unchecked {\\n            if (mulmod(x, 1 << offset, denominator) != 0) result += 1;\\n        }\\n    }\\n\\n    /// @notice Helper function to return the result of `x * y` as 2 uint256\\n    /// @param x The multiplicand as an uint256\\n    /// @param y The multiplier as an uint256\\n    /// @return prod0 The least significant 256 bits of the product\\n    /// @return prod1 The most significant 256 bits of the product\\n    function _getMulProds(uint256 x, uint256 y) private pure returns (uint256 prod0, uint256 prod1) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n    }\\n\\n    /// @notice Helper function to return the result of `x * y / denominator` with full precision\\n    /// @param x The multiplicand as an uint256\\n    /// @param y The multiplier as an uint256\\n    /// @param denominator The divisor as an uint256\\n    /// @param prod0 The least significant 256 bits of the product\\n    /// @param prod1 The most significant 256 bits of the product\\n    /// @return result The result as an uint256\\n    function _getEndOfDivRoundDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        uint256 prod0,\\n        uint256 prod1\\n    ) private pure returns (uint256 result) {\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n        } else {\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0\\n            if (prod1 >= denominator) revert Math512Bits__MulDivOverflow(prod1, denominator);\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1\\n            // See https://cs.stackexchange.com/q/138556/92363\\n            unchecked {\\n                // Does not overflow because the denominator cannot be zero at this stage in the function\\n                uint256 lpotdod = denominator & (~denominator + 1);\\n                assembly {\\n                    // Divide denominator by lpotdod.\\n                    denominator := div(denominator, lpotdod)\\n\\n                    // Divide [prod1 prod0] by lpotdod.\\n                    prod0 := div(prod0, lpotdod)\\n\\n                    // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one\\n                    lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n                }\\n\\n                // Shift in bits from prod1 into prod0\\n                prod0 |= prod1 * lpotdod;\\n\\n                // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n                // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n                // four bits. That is, denominator * inv = 1 mod 2^4\\n                uint256 inverse = (3 * denominator) ^ 2;\\n\\n                // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n                // in modular arithmetic, doubling the correct bits in each step\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n                // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n                // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n                // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n                // is no longer required.\\n                result = prod0 * inverse;\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x1800a111f74ef15cf18737a3e3e8e63e1268ecae5aad8686a7f82a605dd0c9cd\",\"license\":\"MIT\"},\"contracts/LB/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../LBErrors.sol\\\";\\n\\n/// @title Liquidity Book Safe Cast Library\\n/// @author Trader Joe\\n/// @notice Helper contract used for converting uint values safely\\nlibrary SafeCast {\\n    /// @notice Returns x on uint248 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint248\\n    function safe248(uint256 x) internal pure returns (uint248 y) {\\n        if ((y = uint248(x)) != x) revert SafeCast__Exceeds248Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint240 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint240\\n    function safe240(uint256 x) internal pure returns (uint240 y) {\\n        if ((y = uint240(x)) != x) revert SafeCast__Exceeds240Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint232 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint232\\n    function safe232(uint256 x) internal pure returns (uint232 y) {\\n        if ((y = uint232(x)) != x) revert SafeCast__Exceeds232Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint224 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint224\\n    function safe224(uint256 x) internal pure returns (uint224 y) {\\n        if ((y = uint224(x)) != x) revert SafeCast__Exceeds224Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint216 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint216\\n    function safe216(uint256 x) internal pure returns (uint216 y) {\\n        if ((y = uint216(x)) != x) revert SafeCast__Exceeds216Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint208 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint208\\n    function safe208(uint256 x) internal pure returns (uint208 y) {\\n        if ((y = uint208(x)) != x) revert SafeCast__Exceeds208Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint200 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint200\\n    function safe200(uint256 x) internal pure returns (uint200 y) {\\n        if ((y = uint200(x)) != x) revert SafeCast__Exceeds200Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint192 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint192\\n    function safe192(uint256 x) internal pure returns (uint192 y) {\\n        if ((y = uint192(x)) != x) revert SafeCast__Exceeds192Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint184 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint184\\n    function safe184(uint256 x) internal pure returns (uint184 y) {\\n        if ((y = uint184(x)) != x) revert SafeCast__Exceeds184Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint176 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint176\\n    function safe176(uint256 x) internal pure returns (uint176 y) {\\n        if ((y = uint176(x)) != x) revert SafeCast__Exceeds176Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint168 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint168\\n    function safe168(uint256 x) internal pure returns (uint168 y) {\\n        if ((y = uint168(x)) != x) revert SafeCast__Exceeds168Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint160 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint160\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        if ((y = uint160(x)) != x) revert SafeCast__Exceeds160Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint152 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint152\\n    function safe152(uint256 x) internal pure returns (uint152 y) {\\n        if ((y = uint152(x)) != x) revert SafeCast__Exceeds152Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint144 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint144\\n    function safe144(uint256 x) internal pure returns (uint144 y) {\\n        if ((y = uint144(x)) != x) revert SafeCast__Exceeds144Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint136 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint136\\n    function safe136(uint256 x) internal pure returns (uint136 y) {\\n        if ((y = uint136(x)) != x) revert SafeCast__Exceeds136Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint128 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint128\\n    function safe128(uint256 x) internal pure returns (uint128 y) {\\n        if ((y = uint128(x)) != x) revert SafeCast__Exceeds128Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint120 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint120\\n    function safe120(uint256 x) internal pure returns (uint120 y) {\\n        if ((y = uint120(x)) != x) revert SafeCast__Exceeds120Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint112 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint112\\n    function safe112(uint256 x) internal pure returns (uint112 y) {\\n        if ((y = uint112(x)) != x) revert SafeCast__Exceeds112Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint104 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint104\\n    function safe104(uint256 x) internal pure returns (uint104 y) {\\n        if ((y = uint104(x)) != x) revert SafeCast__Exceeds104Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint96 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint96\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        if ((y = uint96(x)) != x) revert SafeCast__Exceeds96Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint88 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint88\\n    function safe88(uint256 x) internal pure returns (uint88 y) {\\n        if ((y = uint88(x)) != x) revert SafeCast__Exceeds88Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint80 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint80\\n    function safe80(uint256 x) internal pure returns (uint80 y) {\\n        if ((y = uint80(x)) != x) revert SafeCast__Exceeds80Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint72 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint72\\n    function safe72(uint256 x) internal pure returns (uint72 y) {\\n        if ((y = uint72(x)) != x) revert SafeCast__Exceeds72Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint64 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint64\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        if ((y = uint64(x)) != x) revert SafeCast__Exceeds64Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint56 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint56\\n    function safe56(uint256 x) internal pure returns (uint56 y) {\\n        if ((y = uint56(x)) != x) revert SafeCast__Exceeds56Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint48 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint48\\n    function safe48(uint256 x) internal pure returns (uint48 y) {\\n        if ((y = uint48(x)) != x) revert SafeCast__Exceeds48Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint40 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint40\\n    function safe40(uint256 x) internal pure returns (uint40 y) {\\n        if ((y = uint40(x)) != x) revert SafeCast__Exceeds40Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint32 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint32\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        if ((y = uint32(x)) != x) revert SafeCast__Exceeds32Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint24 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint24\\n    function safe24(uint256 x) internal pure returns (uint24 y) {\\n        if ((y = uint24(x)) != x) revert SafeCast__Exceeds24Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint16 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint16\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        if ((y = uint16(x)) != x) revert SafeCast__Exceeds16Bits(x);\\n    }\\n\\n    /// @notice Returns x on uint8 and check that it does not overflow\\n    /// @param x The value as an uint256\\n    /// @return y The value as an uint8\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        if ((y = uint8(x)) != x) revert SafeCast__Exceeds8Bits(x);\\n    }\\n}\",\"keccak256\":\"0x5dc5b2aed1c560da9c56a6d116a297bfd87a4911b28928f00a5d32609bb677fa\",\"license\":\"MIT\"},\"contracts/LB/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title Liquidity Book Safe Math Helper Library\\n/// @author Trader Joe\\n/// @notice Helper contract used for calculating absolute value safely\\nlibrary SafeMath {\\n    /// @notice absSub, can't underflow or overflow\\n    /// @param x The first value\\n    /// @param y The second value\\n    /// @return The result of abs(x - y)\\n    function absSub(uint256 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            return x > y ? x - y : y - x;\\n        }\\n    }\\n}\",\"keccak256\":\"0x4b15bb1da2282e8fbcbf8c54f323bf7edcbd678ed53f8f0f977b40d79cb0a7ef\",\"license\":\"MIT\"},\"contracts/interfaces/ILBStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ILBStrategy {\\n    /// @notice The liquidity parameters, such as:\\n    /// @param tokenX: The address of token X\\n    /// @param tokenY: The address of token Y\\n    /// @param pair: The address of the LB pair\\n    /// @param binStep: BinStep as per LB Pair\\n    /// @param deltaIds: the bins you want to add liquidity to. Each value is relative to the active bin ID\\n    /// @param distributionX: The percentage of X you want to add to each bin in deltaIds\\n    /// @param distributionY: The percentage of Y you want to add to each bin in deltaIds\\n    /// @param idSlippage: The slippage tolerance in case active bin moves during time it takes to transact\\n    struct StrategyParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        address pair;\\n        uint16 binStep;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        uint256 idSlippage;\\n    }\\n\\n    function deltaIds() external view returns (int256[] memory deltaIds);\\n\\n    function distributionX()\\n        external\\n        view\\n        returns (uint256[] memory distributionX);\\n\\n    function distributionY()\\n        external\\n        view\\n        returns (uint256[] memory distributionY);\\n\\n    function idSlippage() external view returns (uint256);\\n\\n    function vault() external view returns (address);\\n\\n    function lbPair() external view returns (address);\\n\\n    function setKeeper(address _keeper) external;\\n\\n    function keeper() external view returns (address);\\n\\n    function strategyPositionAtIndex(\\n        uint256 _index\\n    ) external view returns (uint256);\\n\\n    function strategyPositionNumber() external view returns (uint256);\\n\\n    function checkProposedBinLength(\\n        int256[] memory proposedDeltas,\\n        uint256 activeId\\n    ) external view returns (uint256);\\n\\n    function addLiquidity(\\n        uint256 amountX,\\n        uint256 amountY,\\n        uint256 amountXMin,\\n        uint256 amountYMin\\n    ) external returns (uint256[] memory liquidityMinted);\\n\\n    function binStep() external view returns (uint16);\\n\\n    function balanceOfLiquidities()\\n        external\\n        view\\n        returns (uint256 totalLiquidityBalance);\\n\\n    function removeLiquidity(\\n        uint256 denominator\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function tokenX() external view returns (IERC20);\\n\\n    function tokenY() external view returns (IERC20);\\n\\n    function harvest()\\n        external\\n        returns (uint256 amountXReceived, uint256 amountYReceived);\\n\\n    function earn() external;\\n\\n    function retireStrat() external;\\n\\n    function panic() external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function paused() external view returns (bool);\\n\\n    function joeRouter() external view returns (address);\\n\\n    function binHasYLiquidity(\\n        int256[] memory _deltaIds\\n    ) external view returns (bool hasYLiquidity);\\n\\n    function binHasXLiquidity(\\n        int256[] memory _deltaIds\\n    ) external view returns (bool hasXLiquidity);\\n\\n    function beforeDeposit() external;\\n\\n    function rewardsAvailable()\\n        external\\n        view\\n        returns (uint256 rewardsX, uint256 rewardsY);\\n\\n    function executeRebalance(\\n        int256[] memory _deltaIds,\\n        uint256[] memory _distributionX,\\n        uint256[] memory _distributionY,\\n        uint256 _idSlippage\\n    ) external returns (uint256 liquidityAfter);\\n\\n    function executeRebalance()\\n        external\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function checkLengthsPerformRebalance() external;\\n\\n    function strategyActiveBins()\\n        external\\n        view\\n        returns (uint256[] memory activeBins);\\n\\n    function getBalanceX() external view returns (uint256);\\n\\n    function getBalanceY() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc4156c0884957238887daef0e4b5af54aa5c739ad690e5383b74b78160234ff0\",\"license\":\"MIT\"},\"contracts/interfaces/IWrappedNative.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface IWrappedNative {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\",\"keccak256\":\"0x42f302e88efed2fde500bc81b55d3be065785fae685a81a8ba366bfc3d6b508f\",\"license\":\"MIT\"},\"contracts/vault/LBVaultNative.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nimport '../LB-periph/LiquidityAmounts.sol';\\nimport '../LB/interfaces/ILBToken.sol';\\n\\nimport '../interfaces/IWrappedNative.sol';\\nimport '../interfaces/ILBStrategy.sol';\\n\\ncontract LBVaultV1Native is ERC20, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant PRECISION = 1e18;\\n\\n    // The strategy currently in use by the vault.\\n    ILBStrategy public strategy;\\n\\n    // ERC20 token version of AVAX.\\n    IWrappedNative public immutable wavax =\\n        IWrappedNative(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    /// -----------------------------------------------------------\\n    /// Events\\n    /// -----------------------------------------------------------\\n\\n    event UpgradeStrat(address implementation);\\n    event Deposit(\\n        address user,\\n        uint256 amountX,\\n        uint256 amountY,\\n        uint256 shares\\n    );\\n    event Withdraw(\\n        address user,\\n        uint256 amountX,\\n        uint256 amountY,\\n        uint256 shares\\n    );\\n\\n    /// -----------------------------------------------------------\\n    /// Constructor\\n    /// -----------------------------------------------------------\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {}\\n\\n    /// -----------------------------------------------------------\\n    /// AVAX PAIR HELPER FUNCTIONS\\n    /// -----------------------------------------------------------\\n\\n    /// @notice Alternative entry point into the strat. You can send native AVAX,\\n    /// and the vault will wrap them before depositing them into the strat.\\n    /// @notice Deposits tokens in proportion to the vault's current holdings.\\n    /// @param amountX amount of tokenX to deposit\\n    /// @param amountY amount of tokenY to deposit\\n    /// @param amountXMin miniumum amount of tokenX to deposit incl. slippage\\n    /// @param amountYMin miniumum amount of tokenY to deposit incl. slippage\\n    /// @return shares minted to the depoositor\\n    /// @return amountXActual amount token X accepted as deposit\\n    /// @return amountYActual amount token Y accepted as deposit\\n    function depositAVAXPair(\\n        uint256 amountX,\\n        uint256 amountY,\\n        uint256 amountXMin,\\n        uint256 amountYMin\\n    )\\n        external\\n        payable\\n        returns (uint256 shares, uint256 amountXActual, uint256 amountYActual)\\n    {\\n        if (address(strategy.tokenX()) == address(wavax)) {\\n            require(amountX == msg.value, 'Native: Amounts not equal');\\n        }\\n\\n        if (address(strategy.tokenY()) == address(wavax)) {\\n            require(amountY == msg.value, 'Native: Amounts not equal');\\n        }\\n\\n        //wrap the required amount of AVAX to msg.sender\\n        _wavaxDepositAndTransfer(address(msg.sender), msg.value);\\n\\n        //deposit required amounts\\n        (shares, amountXActual, amountYActual) = deposit(\\n            amountX,\\n            amountY,\\n            amountXMin,\\n            amountYMin\\n        );\\n    }\\n\\n    /// @notice alternative exitpoint of native funds from the system. People withdraw from this function.\\n    /// @param _shares amount of shares to withdraw from the system\\n    /// @return amountX the amount of token X removed\\n    /// @return amountY the amount of token Y removed\\n    function withdrawAVAXPair(\\n        uint256 _shares\\n    ) public nonReentrant returns (uint256 amountX, uint256 amountY) {\\n        require(_shares > 0, 'Vault: burn 0 not allowed');\\n        require(_shares <= balanceOf(msg.sender));\\n\\n        //fetch the total supply of receipt tokens\\n        uint256 totalSupply = totalSupply();\\n\\n        //Burn the shares that are being returned\\n        _burn(msg.sender, _shares);\\n\\n        // Calculate token amounts proportional to unused balances\\n        uint256 unusedAmountX = (strategy.getBalanceX() * _shares) /\\n            totalSupply;\\n        uint256 unusedAmountY = (strategy.getBalanceY() * _shares) /\\n            totalSupply;\\n\\n        (uint256 totalX, uint256 totalY) = LiquidityAmounts.getAmountsOf(\\n            address(strategy),\\n            strategy.strategyActiveBins(),\\n            address(strategy.lbPair())\\n        );\\n\\n        //if liquidity is deployed remove in the correct proportion\\n        //remove the liquidity in the correct proportion to the shares to be burnt\\n        uint256 _amountX;\\n        uint256 _amountY;\\n        if (totalX > 0 || totalY > 0) {\\n            uint256 removedDenominator = (PRECISION * totalSupply - 1) /\\n                _shares +\\n                1;\\n\\n            (_amountX, _amountY) = strategy.removeLiquidity(removedDenominator);\\n        }\\n\\n        // Sum up total amounts owed to recipient\\n        amountX = unusedAmountX + _amountX;\\n        amountY = unusedAmountY + _amountY;\\n\\n        //transfer tokens back to the user\\n        if (amountX > 0) {\\n            //check for native\\n            if (address(strategy.tokenX()) == address(wavax)) {\\n                strategy.tokenX().safeTransferFrom(\\n                    address(strategy), //from\\n                    address(this), //to\\n                    amountX //amount\\n                );\\n                //unwrap avax from this address\\n                wavax.withdraw(amountX);\\n                //send avax to the msg sender\\n                _safeTransferAVAX(msg.sender, amountX);\\n            } else {\\n                strategy.tokenX().safeTransferFrom(\\n                    address(strategy),\\n                    address(msg.sender),\\n                    amountX\\n                );\\n            }\\n        }\\n\\n        if (amountY > 0) {\\n            //check for native\\n            if (address(strategy.tokenY()) == address(wavax)) {\\n                strategy.tokenY().safeTransferFrom(\\n                    address(strategy), //from\\n                    address(this), //to\\n                    amountY //amount\\n                );\\n                //unwrap avax from this address\\n                wavax.withdraw(amountY);\\n                //send avax to the msg sender\\n                _safeTransferAVAX(msg.sender, amountY);\\n            } else {\\n                strategy.tokenY().safeTransferFrom(\\n                    address(strategy),\\n                    address(msg.sender),\\n                    amountY\\n                );\\n            }\\n        }\\n\\n        //emit an event\\n        emit Withdraw(msg.sender, amountX, amountY, _shares);\\n    }\\n\\n    /// @notice Helper function to transfer AVAX\\n    /// @param _to The address of the recipient\\n    /// @param _amount The AVAX amount to send\\n    function _safeTransferAVAX(address _to, uint256 _amount) private {\\n        (bool success, ) = _to.call{value: _amount}('');\\n        require(success, 'VaultNative: Failed to Send AVAX');\\n    }\\n\\n    /// @notice Helper function to deposit\\n    /// @param _amount The AVAX amount to wrap\\n    function _wavaxDeposit(uint256 _amount) private {\\n        wavax.deposit{value: _amount}();\\n    }\\n\\n    /// @notice Helper function to deposit and transfer wavax\\n    /// @param _to The address of the recipient\\n    /// @param _amount The AVAX amount to wrap\\n    function _wavaxDepositAndTransfer(address _to, uint256 _amount) private {\\n        wavax.deposit{value: _amount}();\\n        IERC20(address(wavax)).safeTransfer(_to, _amount);\\n    }\\n\\n    /// @dev Receive function that only accept AVAX from the WAVAX contract\\n    receive() external payable {\\n        require(\\n            msg.sender == address(wavax),\\n            'VaultNative: Sender not WAVAX contract'\\n        );\\n    }\\n\\n    /// -----------------------------------------------------------\\n    /// Public functions\\n    /// -----------------------------------------------------------\\n\\n    /// @notice primary entrypoint of funds into the system. users deposit with this function\\n    /// into the vault. The vault is then in charge of sending funds into the strategy.\\n    /// funds stay idle in the strategy until earn() is called on the strategy and valid parameters\\n    /// @notice Deposits tokens in proportion to the vault's current holdings.\\n    /// @param amountX amount of tokenX to deposit\\n    /// @param amountY amount of tokenY to deposit\\n    /// @param amountXMin miniumum amount of tokenX to deposit incl. slippage\\n    /// @param amountYMin miniumum amount of tokenY to deposit incl. slippage\\n    /// @return shares minted to the depoositor\\n    /// @return amountXActual amount token X accepted as deposit\\n    /// @return amountYActual amount token Y accepted as deposit\\n    function deposit(\\n        uint256 amountX,\\n        uint256 amountY,\\n        uint256 amountXMin,\\n        uint256 amountYMin\\n    )\\n        public\\n        nonReentrant\\n        returns (uint256 shares, uint256 amountXActual, uint256 amountYActual)\\n    {\\n        require(amountX > 0 || amountY > 0, 'Vault: deposit cannot be 0');\\n\\n        //harvest any pending rewards to prevent flash theft of yield\\n        if (totalSupply() != 0) {\\n            strategy.harvest();\\n        }\\n\\n        // Calculate amounts proportional to vault's holdings\\n        (shares, amountXActual, amountYActual) = calcSharesAndAmounts(\\n            amountX,\\n            amountY\\n        );\\n\\n        require(shares > 0, 'shares');\\n        require(amountXActual >= amountXMin, 'amount0Min');\\n        require(amountYActual >= amountYMin, 'amount1Min');\\n\\n        //transfer tokens required into the strategy\\n        if (amountXActual > 0) {\\n            strategy.tokenX().safeTransferFrom(\\n                msg.sender,\\n                address(strategy),\\n                amountXActual\\n            );\\n        }\\n\\n        if (amountYActual > 0) {\\n            strategy.tokenY().safeTransferFrom(\\n                msg.sender,\\n                address(strategy),\\n                amountYActual\\n            );\\n        }\\n\\n        //mint vault shares at the required proportion of new liquidity supplied.\\n        _mint(msg.sender, shares);\\n\\n        //emit a deposit event\\n        emit Deposit(msg.sender, amountXActual, amountYActual, shares);\\n    }\\n\\n    /// @notice a helper which will withdraw all of the users shares from the vault\\n    function withdrawAll() external {\\n        withdraw(balanceOf(msg.sender));\\n    }\\n\\n    /// @notice primary exit point of funds from the system. users withdraw using this function.\\n    /// @param _shares amount of shares to withdraw from the system\\n    /// @return amountX the amount of token X removed\\n    /// @return amountY the amount of token Y removed\\n    function withdraw(\\n        uint256 _shares\\n    ) public nonReentrant returns (uint256 amountX, uint256 amountY) {\\n        require(_shares > 0, 'Vault: burn 0 not allowed');\\n        require(_shares <= balanceOf(msg.sender));\\n\\n        //fetch the total supply of receipt tokens\\n        uint256 totalSupply = totalSupply();\\n\\n        //Burn the shares that are being returned\\n        _burn(msg.sender, _shares);\\n\\n        // Calculate token amounts proportional to unused balances\\n        uint256 unusedAmountX = (strategy.getBalanceX() * _shares) /\\n            totalSupply;\\n        uint256 unusedAmountY = (strategy.getBalanceY() * _shares) /\\n            totalSupply;\\n\\n        (uint256 totalX, uint256 totalY) = LiquidityAmounts.getAmountsOf(\\n            address(strategy),\\n            strategy.strategyActiveBins(),\\n            address(strategy.lbPair())\\n        );\\n\\n        //if liquidity is deployed remove in the correct proportion\\n        //remove the liquidity in the correct proportion to the shares to be burnt\\n        uint256 _amountX;\\n        uint256 _amountY;\\n        if (totalX > 0 || totalY > 0) {\\n            uint256 removedDenominator = (PRECISION * totalSupply - 1) /\\n                _shares +\\n                1;\\n\\n            (_amountX, _amountY) = strategy.removeLiquidity(removedDenominator);\\n        }\\n\\n        // Sum up total amounts owed to recipient\\n        amountX = unusedAmountX + _amountX;\\n        amountY = unusedAmountY + _amountY;\\n\\n        //transfer tokens back to the user from the strategy\\n        if (amountX > 0) {\\n            strategy.tokenX().safeTransferFrom(\\n                address(strategy),\\n                address(msg.sender),\\n                amountX\\n            );\\n        }\\n\\n        if (amountY > 0) {\\n            strategy.tokenY().safeTransferFrom(\\n                address(strategy),\\n                address(msg.sender),\\n                amountY\\n            );\\n        }\\n\\n        //emit an event\\n        emit Withdraw(msg.sender, amountX, amountY, _shares);\\n    }\\n\\n    /// -----------------------------------------------------------\\n    /// View functions\\n    /// -----------------------------------------------------------\\n\\n    /// @dev Calculates the largest possible `amountx` and `amountY` such that\\n    /// they're in the same proportion as total amounts, but not greater than\\n    /// `amountXDesired` and `amountYDesired` respectively.\\n    function calcSharesAndAmounts(\\n        uint256 amountXDesired,\\n        uint256 amountYDesired\\n    ) public view returns (uint256 shares, uint256 amountX, uint256 amountY) {\\n        uint256 totalSupply = totalSupply();\\n\\n        //add currently active tokens supplied as liquidity\\n        (uint256 totalX, uint256 totalY) = LiquidityAmounts.getAmountsOf(\\n            address(strategy),\\n            strategy.strategyActiveBins(),\\n            address(strategy.lbPair())\\n        );\\n\\n        //add currently unused tokens in the strategy\\n        totalX += strategy.getBalanceX();\\n        totalY += strategy.getBalanceY();\\n\\n        // If total supply > 0, vault can't be empty\\n        assert(totalSupply == 0 || totalX > 0 || totalY > 0);\\n\\n        if (totalSupply == 0) {\\n            // For first deposit, just use the amounts desired\\n            amountX = amountXDesired;\\n            amountY = amountYDesired;\\n            shares = Math.max(amountX, amountY);\\n        } else if (totalX == 0) {\\n            amountY = amountYDesired;\\n            shares = (amountY * totalSupply) / totalY;\\n        } else if (totalY == 0) {\\n            amountX = amountXDesired;\\n            shares = (amountX * totalSupply) / totalX;\\n        } else {\\n            uint256 cross = Math.min(\\n                (amountXDesired * totalY),\\n                (amountYDesired * totalX)\\n            );\\n\\n            require(cross > 0, 'cross');\\n\\n            // Round up amounts\\n            amountX = (cross - 1) / totalY + 1;\\n            amountY = (cross - 1) / totalX + 1;\\n            shares = (cross * totalSupply) / totalX / totalY;\\n        }\\n    }\\n\\n    /// @notice returns the input tokens that may be deposited to this vault\\n    /// @return tokenX address of first token\\n    /// @return tokenY address of second token\\n    function want() external view returns (IERC20, IERC20) {\\n        return (strategy.tokenX(), strategy.tokenY());\\n    }\\n\\n    /// @notice Gets the underlying assets in the vault i.e tokenX and tokenY\\n    /// includes all tokenX and tokenY idle in the strategy and supplied as liquidity\\n    /// @param _shares amount of shares\\n    /// @return totalX amounts of tokenX\\n    /// @return totalY amounts of tokenY\\n    function getUnderlyingAssets(\\n        uint256 _shares\\n    ) external view returns (uint256 totalX, uint256 totalY) {\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply == 0) {\\n            return (0, 0);\\n        }\\n\\n        //add currently active tokens supplied as liquidity\\n        (totalX, totalY) = LiquidityAmounts.getAmountsOf(\\n            address(strategy),\\n            strategy.strategyActiveBins(),\\n            address(strategy.lbPair())\\n        );\\n\\n        //add currently unused tokens in the strategy\\n        totalX += strategy.getBalanceX();\\n        totalY += strategy.getBalanceY();\\n\\n        totalX = (totalX * _shares) / _totalSupply;\\n        totalY = (totalY * _shares) / _totalSupply;\\n    }\\n\\n    /// -----------------------------------------------------------\\n    /// Owner functions\\n    /// -----------------------------------------------------------\\n\\n    /// @notice Allows the vaults underlying strategy to be swapped out after first deploy\\n    /// @param _strategy address of the proposed new strategy.\\n    function setStrategyAddress(address _strategy) external onlyOwner {\\n        require(\\n            address(strategy) == 0x0000000000000000000000000000000000000000,\\n            'Vault: Strategy already Set'\\n        );\\n        strategy = ILBStrategy(_strategy);\\n        emit UpgradeStrat(_strategy);\\n    }\\n\\n    /// @notice Rescues funds stuck\\n    /// @param _token address of the token to rescue.\\n    function inCaseTokensGetStuck(address _token) external onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransfer(msg.sender, amount);\\n    }\\n\\n    /// @notice Rescues LB tokens funds stuck\\n    /// @param _lbToken address of the token to rescue.\\n    /// @param _id id of the token to rescue.\\n    function inCaseLBTokensGetStuck(\\n        address _lbToken,\\n        uint256 _id\\n    ) external onlyOwner {\\n        uint256 amount = ILBToken(_lbToken).balanceOf(address(this), _id);\\n        ILBToken(_lbToken).safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            _id,\\n            amount\\n        );\\n    }\\n\\n    /// -----------------------------------------------------------\\n    /// END\\n    /// -----------------------------------------------------------\\n}\\n\",\"keccak256\":\"0xe1d988a5c7faf908f96d3f3d6206c0e51159e6e7b2985ac63bd9991df9f5dab1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405273b31f66aa3c1e785363f0875a1b74e27b85fd66c76080523480156200002957600080fd5b50604051620038e6380380620038e68339810160408190526200004c91620001b0565b818160036200005c8382620002a9565b5060046200006b8282620002a9565b50505062000088620000826200009560201b60201c565b62000099565b5050600160065562000375565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200011357600080fd5b81516001600160401b0380821115620001305762000130620000eb565b604051601f8301601f19908116603f011681019082821181831017156200015b576200015b620000eb565b816040528381526020925086838588010111156200017857600080fd5b600091505b838210156200019c57858201830151818301840152908201906200017d565b600093810190920192909252949350505050565b60008060408385031215620001c457600080fd5b82516001600160401b0380821115620001dc57600080fd5b620001ea8683870162000101565b935060208501519150808211156200020157600080fd5b50620002108582860162000101565b9150509250929050565b600181811c908216806200022f57607f821691505b6020821081036200025057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002a457600081815260208120601f850160051c810160208610156200027f5750805b601f850160051c820191505b81811015620002a0578281556001016200028b565b5050505b505050565b81516001600160401b03811115620002c557620002c5620000eb565b620002dd81620002d684546200021a565b8462000256565b602080601f831160018114620003155760008415620002fc5750858301515b600019600386901b1c1916600185901b178555620002a0565b600085815260208120601f198616915b82811015620003465788860151825594840194600190910190840162000325565b5085821015620003655787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051613516620003d0600039600081816101c0015281816102cc015281816110fe0152818161121701528181611c9c01528181611d8401528181611e6c01528181611f5401528181612ac40152612b4201526135166000f3fe6080604052600436106101b05760003560e01c806370a08231116100ec578063a8c62e761161008a578063cc177e9811610064578063cc177e98146105ac578063dd62ed3e146105cc578063def68a9c14610612578063f2fde38b1461063257600080fd5b8063a8c62e761461054c578063a9059cbb1461056c578063cbe361961461058c57600080fd5b8063853828b6116100c6578063853828b6146104e45780638da5cb5b146104f957806395d89b4114610517578063a457c2d71461052c57600080fd5b806370a0823114610479578063715018a6146104af5780638405f1d4146104c457600080fd5b806324cfba9f11610159578063313ce56711610133578063313ce5671461040a578063395093511461042657806340ff395b1461044657806358a3b1b61461045957600080fd5b806324cfba9f1461037a5780632505c3d91461039a5780632e1a7d4d146103d557600080fd5b806318160ddd1161018a57806318160ddd146103065780631f1fcd511461032557806323b872dd1461035a57600080fd5b806306fdde031461025f578063095ea7b31461028a578063117be4c2146102ba57600080fd5b3661025a57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102585760405162461bcd60e51b815260206004820152602660248201527f5661756c744e61746976653a2053656e646572206e6f7420574156415820636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b005b600080fd5b34801561026b57600080fd5b50610274610652565b60405161028191906130f2565b60405180910390f35b34801561029657600080fd5b506102aa6102a536600461313a565b6106e4565b6040519015158152602001610281565b3480156102c657600080fd5b506102ee7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610281565b34801561031257600080fd5b506002545b604051908152602001610281565b34801561033157600080fd5b5061033a6106fe565b604080516001600160a01b03938416815292909116602083015201610281565b34801561036657600080fd5b506102aa610375366004613166565b6107f7565b34801561038657600080fd5b506102586103953660046131a7565b61081b565b3480156103a657600080fd5b506103ba6103b53660046131c4565b6108dd565b60408051938452602084019290925290820152606001610281565b3480156103e157600080fd5b506103f56103f03660046131f6565b610c23565b60408051928352602083019190915201610281565b34801561041657600080fd5b5060405160128152602001610281565b34801561043257600080fd5b506102aa61044136600461313a565b6110b8565b6103ba6104543660046131c4565b6110f7565b34801561046557600080fd5b5061025861047436600461313a565b61130c565b34801561048557600080fd5b506103176104943660046131a7565b6001600160a01b031660009081526020819052604090205490565b3480156104bb57600080fd5b50610258611412565b3480156104d057600080fd5b506103ba6104df36600461320f565b611426565b3480156104f057600080fd5b506102586116f2565b34801561050557600080fd5b506005546001600160a01b03166102ee565b34801561052357600080fd5b5061027461170f565b34801561053857600080fd5b506102aa61054736600461313a565b61171e565b34801561055857600080fd5b506007546102ee906001600160a01b031681565b34801561057857600080fd5b506102aa61058736600461313a565b6117c8565b34801561059857600080fd5b506103f56105a73660046131f6565b6117d6565b3480156105b857600080fd5b506103f56105c73660046131f6565b611996565b3480156105d857600080fd5b506103176105e7366004613231565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561061e57600080fd5b5061025861062d3660046131a7565b612019565b34801561063e57600080fd5b5061025861064d3660046131a7565b6120bb565b6060600380546106619061326a565b80601f016020809104026020016040519081016040528092919081815260200182805461068d9061326a565b80156106da5780601f106106af576101008083540402835291602001916106da565b820191906000526020600020905b8154815290600101906020018083116106bd57829003601f168201915b5050505050905090565b6000336106f281858561214b565b60019150505b92915050565b600080600760009054906101000a90046001600160a01b03166001600160a01b03166316dc165b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610754573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077891906132a4565b600760009054906101000a90046001600160a01b03166001600160a01b031663b7d19fc46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ef91906132a4565b915091509091565b6000336108058582856122a4565b610810858585612336565b506001949350505050565b610823612523565b6007546001600160a01b03161561087c5760405162461bcd60e51b815260206004820152601b60248201527f5661756c743a20537472617465677920616c7265616479205365740000000000604482015260640161024f565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f7f37d440e85aba7fbf641c4bda5ca4ef669a80bffaacde2aa8d9feb1b048c82c9060200160405180910390a150565b60008060006108ea61257d565b60008711806108f95750600086115b6109455760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a206465706f7369742063616e6e6f742062652030000000000000604482015260640161024f565b600254156109d657600754604080517f4641257d00000000000000000000000000000000000000000000000000000000815281516001600160a01b0390931692634641257d9260048084019391929182900301816000875af11580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d391906132c1565b50505b6109e08787611426565b9194509250905082610a345760405162461bcd60e51b815260206004820152600660248201527f7368617265730000000000000000000000000000000000000000000000000000604482015260640161024f565b84821015610a845760405162461bcd60e51b815260206004820152600a60248201527f616d6f756e74304d696e00000000000000000000000000000000000000000000604482015260640161024f565b83811015610ad45760405162461bcd60e51b815260206004820152600a60248201527f616d6f756e74314d696e00000000000000000000000000000000000000000000604482015260640161024f565b8115610b6357600754604080516316dc165b60e01b81529051610b639233926001600160a01b0390911691869183916316dc165b916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5291906132a4565b6001600160a01b03169291906125d6565b8015610bbd5760075460408051632df467f160e21b81529051610bbd9233926001600160a01b03909116918591839163b7d19fc4916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b610bc73384612687565b6040805133815260208101849052908101829052606081018490527f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e9060800160405180910390a1610c196001600655565b9450945094915050565b600080610c2e61257d565b60008311610c7e5760405162461bcd60e51b815260206004820152601960248201527f5661756c743a206275726e2030206e6f7420616c6c6f77656400000000000000604482015260640161024f565b33600090815260208190526040902054831115610c9a57600080fd5b6000610ca560025490565b9050610cb13385612746565b60008185600760009054906101000a90046001600160a01b03166001600160a01b0316633b6bc1a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2c91906132e5565b610d369190613314565b610d409190613341565b905060008286600760009054906101000a90046001600160a01b03166001600160a01b0316637d3db0676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbd91906132e5565b610dc79190613314565b610dd19190613341565b600754604080516335a7476b60e21b815290519293506000928392610ecb926001600160a01b0390911691829163d69d1dac91600480830192889291908290030181865afa158015610e27573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e4f9190810190613379565b600760009054906101000a90046001600160a01b03166001600160a01b031663625af7676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec691906132a4565b6128ac565b915091506000806000841180610ee15750600083115b15610f925760008a6001610efd8a670de0b6b3a7640000613314565b610f079190613437565b610f119190613341565b610f1c90600161344a565b600754604051639c8f9f2360e01b8152600481018390529192506001600160a01b031690639c8f9f239060240160408051808303816000875af1158015610f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8b91906132c1565b9093509150505b610f9c828761344a565b9850610fa8818661344a565b9750881561100257600754604080516316dc165b60e01b81529051611002926001600160a01b03169133918d9184916316dc165b916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b871561105a5760075460408051632df467f160e21b8152905161105a926001600160a01b03169133918c91849163b7d19fc4916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b60408051338152602081018b9052908101899052606081018b90527f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca949060800160405180910390a1505050505050506110b36001600655565b915091565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906106f290829086906110f290879061344a565b61214b565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600760009054906101000a90046001600160a01b03166001600160a01b03166316dc165b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119d91906132a4565b6001600160a01b0316036111fa573487146111fa5760405162461bcd60e51b815260206004820152601960248201527f4e61746976653a20416d6f756e7473206e6f7420657175616c00000000000000604482015260640161024f565b60075460408051632df467f160e21b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693169163b7d19fc49160048083019260209291908290030181865afa158015611265573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128991906132a4565b6001600160a01b0316036112e6573486146112e65760405162461bcd60e51b815260206004820152601960248201527f4e61746976653a20416d6f756e7473206e6f7420657175616c00000000000000604482015260640161024f565b6112f03334612ac2565b6112fc878787876108dd565b9199909850909650945050505050565b611314612523565b604051627eeac760e11b8152306004820152602481018290526000906001600160a01b0384169062fdd58e90604401602060405180830381865afa158015611360573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138491906132e5565b6040517f0febdd4900000000000000000000000000000000000000000000000000000000815230600482015233602482015260448101849052606481018290529091506001600160a01b03841690630febdd4990608401600060405180830381600087803b1580156113f557600080fd5b505af1158015611409573d6000803e3d6000fd5b50505050505050565b61141a612523565b6114246000612b6d565b565b60008060008061143560025490565b600754604080516335a7476b60e21b81529051929350600092839261148b926001600160a01b0390911691829163d69d1dac91600480830192889291908290030181865afa158015610e27573d6000803e3d6000fd5b91509150600760009054906101000a90046001600160a01b03166001600160a01b0316633b6bc1a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150691906132e5565b611510908361344a565b9150600760009054906101000a90046001600160a01b03166001600160a01b0316637d3db0676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158991906132e5565b611593908261344a565b90508215806115a25750600082115b806115ad5750600081115b6115b9576115b961345d565b826000036115d8578794508693506115d18585612bcc565b95506116e8565b816000036115f857869350806115ee8486613314565b6115d19190613341565b8060000361160e57879450816115ee8487613314565b600061162c61161d838b613314565b611627858b613314565b612be4565b90506000811161167e5760405162461bcd60e51b815260206004820152600560248201527f63726f7373000000000000000000000000000000000000000000000000000000604482015260640161024f565b8161168a600183613437565b6116949190613341565b61169f90600161344a565b9550826116ad600183613437565b6116b79190613341565b6116c290600161344a565b945081836116d08684613314565b6116da9190613341565b6116e49190613341565b9650505b5050509250925092565b3360009081526020819052604090205461170b90610c23565b5050565b6060600480546106619061326a565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156117bb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161024f565b610810828686840361214b565b6000336106f2818585612336565b60008060006117e460025490565b9050806000036117fa5750600093849350915050565b600754604080516335a7476b60e21b81529051611848926001600160a01b031691829163d69d1dac916004808201926000929091908290030181865afa158015610e27573d6000803e3d6000fd5b600754604080517f3b6bc1a700000000000000000000000000000000000000000000000000000000815290519396509194506001600160a01b031691633b6bc1a7916004808201926020929091908290030181865afa1580156118af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d391906132e5565b6118dd908461344a565b9250600760009054906101000a90046001600160a01b03166001600160a01b0316637d3db0676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611932573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195691906132e5565b611960908361344a565b91508061196d8585613314565b6119779190613341565b9250806119848584613314565b61198e9190613341565b915050915091565b6000806119a161257d565b600083116119f15760405162461bcd60e51b815260206004820152601960248201527f5661756c743a206275726e2030206e6f7420616c6c6f77656400000000000000604482015260640161024f565b33600090815260208190526040902054831115611a0d57600080fd5b6000611a1860025490565b9050611a243385612746565b60008185600760009054906101000a90046001600160a01b03166001600160a01b0316633b6bc1a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9f91906132e5565b611aa99190613314565b611ab39190613341565b905060008286600760009054906101000a90046001600160a01b03166001600160a01b0316637d3db0676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3091906132e5565b611b3a9190613314565b611b449190613341565b600754604080516335a7476b60e21b815290519293506000928392611b9a926001600160a01b0390911691829163d69d1dac91600480830192889291908290030181865afa158015610e27573d6000803e3d6000fd5b915091506000806000841180611bb05750600083115b15611c615760008a6001611bcc8a670de0b6b3a7640000613314565b611bd69190613437565b611be09190613341565b611beb90600161344a565b600754604051639c8f9f2360e01b8152600481018390529192506001600160a01b031690639c8f9f239060240160408051808303816000875af1158015611c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5a91906132c1565b9093509150505b611c6b828761344a565b9850611c77818661344a565b97508815611e4957600754604080516316dc165b60e01b815290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169316916316dc165b9160048083019260209291908290030181865afa158015611cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0e91906132a4565b6001600160a01b031603611df757600754604080516316dc165b60e01b81529051611d6e926001600160a01b03169130918d9184916316dc165b916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b604051632e1a7d4d60e01b8152600481018a90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611dd057600080fd5b505af1158015611de4573d6000803e3d6000fd5b50505050611df2338a612bf3565b611e49565b600754604080516316dc165b60e01b81529051611e49926001600160a01b03169133918d9184916316dc165b916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b871561105a5760075460408051632df467f160e21b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693169163b7d19fc49160048083019260209291908290030181865afa158015611eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ede91906132a4565b6001600160a01b031603611fc75760075460408051632df467f160e21b81529051611f3e926001600160a01b03169130918c91849163b7d19fc4916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b604051632e1a7d4d60e01b8152600481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611fa057600080fd5b505af1158015611fb4573d6000803e3d6000fd5b50505050611fc23389612bf3565b61105a565b60075460408051632df467f160e21b8152905161105a926001600160a01b03169133918c91849163b7d19fc4916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b612021612523565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a591906132e5565b905061170b6001600160a01b0383163383612c96565b6120c3612523565b6001600160a01b03811661213f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161024f565b61214881612b6d565b50565b6001600160a01b0383166121c65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161024f565b6001600160a01b0382166122425760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161024f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461233057818110156123235760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161024f565b612330848484840361214b565b50505050565b6001600160a01b0383166123b25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161024f565b6001600160a01b03821661242e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161024f565b6001600160a01b038316600090815260208190526040902054818110156124bd5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161024f565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3612330565b6005546001600160a01b031633146114245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024f565b6002600654036125cf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161024f565b6002600655565b6040516001600160a01b03808516602483015283166044820152606481018290526123309085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612cdf565b6001600160a01b0382166126dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161024f565b80600260008282546126ef919061344a565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166127c25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161024f565b6001600160a01b038216600090815260208190526040902054818110156128515760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161024f565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612297565b505050565b60008060005b8451811015612ab95760006128df8683815181106128d2576128d2613473565b6020026020010151612dc4565b604051627eeac760e11b81526001600160a01b03898116600483015262ffffff8316602483015291925060009187169062fdd58e90604401602060405180830381865afa158015612934573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295891906132e5565b6040517f0abe968800000000000000000000000000000000000000000000000000000000815262ffffff8416600482015290915060009081906001600160a01b03891690630abe9688906024016040805180830381865afa1580156129c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e591906132c1565b6040517fbd85b03900000000000000000000000000000000000000000000000000000000815262ffffff8716600482015291935091506000906001600160a01b038a169063bd85b03990602401602060405180830381865afa158015612a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7391906132e5565b9050612a80848483612e0b565b612a8a908961344a565b9750612a97848383612e0b565b612aa1908861344a565b9650505050505080612ab290613489565b90506128b2565b50935093915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612b1d57600080fd5b505af1158015612b31573d6000803e3d6000fd5b5061170b9350506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915084905083612c96565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818311612bdb5781612bdd565b825b9392505050565b6000818310612bdb5781612bdd565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612c40576040519150601f19603f3d011682016040523d82523d6000602084013e612c45565b606091505b50509050806128a75760405162461bcd60e51b815260206004820181905260248201527f5661756c744e61746976653a204661696c656420746f2053656e642041564158604482015260640161024f565b6040516001600160a01b0383166024820152604481018290526128a79084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612623565b6000612d34826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e359092919063ffffffff16565b8051909150156128a75780806020019051810190612d5291906134a2565b6128a75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161024f565b8062ffffff81168114612e06576040517f76949f3c0000000000000000000000000000000000000000000000000000000081526004810183905260240161024f565b919050565b6000806000612e1a8686612e4c565b91509150612e2b8686868585612e6b565b9695505050505050565b6060612e448484600085612f3e565b949350505050565b6000806000198385098385029250828110838203039150509250929050565b600081600003612e8c57838381612e8457612e8461332b565b049050612f35565b838210612ecf576040517fcad6a856000000000000000000000000000000000000000000000000000000008152600481018390526024810185905260440161024f565b60008486880960018619810187169687900496600081900381900490910186831190950394850291909503949094049390931792505060026003840281188085028203028085028203028085028203028085028203028085028203028085029091030282025b95945050505050565b606082471015612fb65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161024f565b600080866001600160a01b03168587604051612fd291906134c4565b60006040518083038185875af1925050503d806000811461300f576040519150601f19603f3d011682016040523d82523d6000602084013e613014565b606091505b509150915061302587838387613030565b979650505050505050565b6060831561309f578251600003613098576001600160a01b0385163b6130985760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161024f565b5081612e44565b612e4483838151156130b45781518083602001fd5b8060405162461bcd60e51b815260040161024f91906130f2565b60005b838110156130e95781810151838201526020016130d1565b50506000910152565b60208152600082518060208401526131118160408501602087016130ce565b601f01601f19169190910160400192915050565b6001600160a01b038116811461214857600080fd5b6000806040838503121561314d57600080fd5b823561315881613125565b946020939093013593505050565b60008060006060848603121561317b57600080fd5b833561318681613125565b9250602084013561319681613125565b929592945050506040919091013590565b6000602082840312156131b957600080fd5b8135612bdd81613125565b600080600080608085870312156131da57600080fd5b5050823594602084013594506040840135936060013592509050565b60006020828403121561320857600080fd5b5035919050565b6000806040838503121561322257600080fd5b50508035926020909101359150565b6000806040838503121561324457600080fd5b823561324f81613125565b9150602083013561325f81613125565b809150509250929050565b600181811c9082168061327e57607f821691505b60208210810361329e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156132b657600080fd5b8151612bdd81613125565b600080604083850312156132d457600080fd5b505080516020909101519092909150565b6000602082840312156132f757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106f8576106f86132fe565b634e487b7160e01b600052601260045260246000fd5b60008261335e57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561338c57600080fd5b825167ffffffffffffffff808211156133a457600080fd5b818501915085601f8301126133b857600080fd5b8151818111156133ca576133ca613363565b8060051b604051601f19603f830116810181811085821117156133ef576133ef613363565b60405291825284820192508381018501918883111561340d57600080fd5b938501935b8285101561342b57845184529385019392850192613412565b98975050505050505050565b818103818111156106f8576106f86132fe565b808201808211156106f8576106f86132fe565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006001820161349b5761349b6132fe565b5060010190565b6000602082840312156134b457600080fd5b81518015158114612bdd57600080fd5b600082516134d68184602087016130ce565b919091019291505056fea26469706673582212206725d4575f90b8392d8803fa572988598d13832d8ba4d882aeb3275cb3b5e8c964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101b05760003560e01c806370a08231116100ec578063a8c62e761161008a578063cc177e9811610064578063cc177e98146105ac578063dd62ed3e146105cc578063def68a9c14610612578063f2fde38b1461063257600080fd5b8063a8c62e761461054c578063a9059cbb1461056c578063cbe361961461058c57600080fd5b8063853828b6116100c6578063853828b6146104e45780638da5cb5b146104f957806395d89b4114610517578063a457c2d71461052c57600080fd5b806370a0823114610479578063715018a6146104af5780638405f1d4146104c457600080fd5b806324cfba9f11610159578063313ce56711610133578063313ce5671461040a578063395093511461042657806340ff395b1461044657806358a3b1b61461045957600080fd5b806324cfba9f1461037a5780632505c3d91461039a5780632e1a7d4d146103d557600080fd5b806318160ddd1161018a57806318160ddd146103065780631f1fcd511461032557806323b872dd1461035a57600080fd5b806306fdde031461025f578063095ea7b31461028a578063117be4c2146102ba57600080fd5b3661025a57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102585760405162461bcd60e51b815260206004820152602660248201527f5661756c744e61746976653a2053656e646572206e6f7420574156415820636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b005b600080fd5b34801561026b57600080fd5b50610274610652565b60405161028191906130f2565b60405180910390f35b34801561029657600080fd5b506102aa6102a536600461313a565b6106e4565b6040519015158152602001610281565b3480156102c657600080fd5b506102ee7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610281565b34801561031257600080fd5b506002545b604051908152602001610281565b34801561033157600080fd5b5061033a6106fe565b604080516001600160a01b03938416815292909116602083015201610281565b34801561036657600080fd5b506102aa610375366004613166565b6107f7565b34801561038657600080fd5b506102586103953660046131a7565b61081b565b3480156103a657600080fd5b506103ba6103b53660046131c4565b6108dd565b60408051938452602084019290925290820152606001610281565b3480156103e157600080fd5b506103f56103f03660046131f6565b610c23565b60408051928352602083019190915201610281565b34801561041657600080fd5b5060405160128152602001610281565b34801561043257600080fd5b506102aa61044136600461313a565b6110b8565b6103ba6104543660046131c4565b6110f7565b34801561046557600080fd5b5061025861047436600461313a565b61130c565b34801561048557600080fd5b506103176104943660046131a7565b6001600160a01b031660009081526020819052604090205490565b3480156104bb57600080fd5b50610258611412565b3480156104d057600080fd5b506103ba6104df36600461320f565b611426565b3480156104f057600080fd5b506102586116f2565b34801561050557600080fd5b506005546001600160a01b03166102ee565b34801561052357600080fd5b5061027461170f565b34801561053857600080fd5b506102aa61054736600461313a565b61171e565b34801561055857600080fd5b506007546102ee906001600160a01b031681565b34801561057857600080fd5b506102aa61058736600461313a565b6117c8565b34801561059857600080fd5b506103f56105a73660046131f6565b6117d6565b3480156105b857600080fd5b506103f56105c73660046131f6565b611996565b3480156105d857600080fd5b506103176105e7366004613231565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561061e57600080fd5b5061025861062d3660046131a7565b612019565b34801561063e57600080fd5b5061025861064d3660046131a7565b6120bb565b6060600380546106619061326a565b80601f016020809104026020016040519081016040528092919081815260200182805461068d9061326a565b80156106da5780601f106106af576101008083540402835291602001916106da565b820191906000526020600020905b8154815290600101906020018083116106bd57829003601f168201915b5050505050905090565b6000336106f281858561214b565b60019150505b92915050565b600080600760009054906101000a90046001600160a01b03166001600160a01b03166316dc165b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610754573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077891906132a4565b600760009054906101000a90046001600160a01b03166001600160a01b031663b7d19fc46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ef91906132a4565b915091509091565b6000336108058582856122a4565b610810858585612336565b506001949350505050565b610823612523565b6007546001600160a01b03161561087c5760405162461bcd60e51b815260206004820152601b60248201527f5661756c743a20537472617465677920616c7265616479205365740000000000604482015260640161024f565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f7f37d440e85aba7fbf641c4bda5ca4ef669a80bffaacde2aa8d9feb1b048c82c9060200160405180910390a150565b60008060006108ea61257d565b60008711806108f95750600086115b6109455760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a206465706f7369742063616e6e6f742062652030000000000000604482015260640161024f565b600254156109d657600754604080517f4641257d00000000000000000000000000000000000000000000000000000000815281516001600160a01b0390931692634641257d9260048084019391929182900301816000875af11580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d391906132c1565b50505b6109e08787611426565b9194509250905082610a345760405162461bcd60e51b815260206004820152600660248201527f7368617265730000000000000000000000000000000000000000000000000000604482015260640161024f565b84821015610a845760405162461bcd60e51b815260206004820152600a60248201527f616d6f756e74304d696e00000000000000000000000000000000000000000000604482015260640161024f565b83811015610ad45760405162461bcd60e51b815260206004820152600a60248201527f616d6f756e74314d696e00000000000000000000000000000000000000000000604482015260640161024f565b8115610b6357600754604080516316dc165b60e01b81529051610b639233926001600160a01b0390911691869183916316dc165b916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5291906132a4565b6001600160a01b03169291906125d6565b8015610bbd5760075460408051632df467f160e21b81529051610bbd9233926001600160a01b03909116918591839163b7d19fc4916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b610bc73384612687565b6040805133815260208101849052908101829052606081018490527f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e9060800160405180910390a1610c196001600655565b9450945094915050565b600080610c2e61257d565b60008311610c7e5760405162461bcd60e51b815260206004820152601960248201527f5661756c743a206275726e2030206e6f7420616c6c6f77656400000000000000604482015260640161024f565b33600090815260208190526040902054831115610c9a57600080fd5b6000610ca560025490565b9050610cb13385612746565b60008185600760009054906101000a90046001600160a01b03166001600160a01b0316633b6bc1a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2c91906132e5565b610d369190613314565b610d409190613341565b905060008286600760009054906101000a90046001600160a01b03166001600160a01b0316637d3db0676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbd91906132e5565b610dc79190613314565b610dd19190613341565b600754604080516335a7476b60e21b815290519293506000928392610ecb926001600160a01b0390911691829163d69d1dac91600480830192889291908290030181865afa158015610e27573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e4f9190810190613379565b600760009054906101000a90046001600160a01b03166001600160a01b031663625af7676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec691906132a4565b6128ac565b915091506000806000841180610ee15750600083115b15610f925760008a6001610efd8a670de0b6b3a7640000613314565b610f079190613437565b610f119190613341565b610f1c90600161344a565b600754604051639c8f9f2360e01b8152600481018390529192506001600160a01b031690639c8f9f239060240160408051808303816000875af1158015610f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8b91906132c1565b9093509150505b610f9c828761344a565b9850610fa8818661344a565b9750881561100257600754604080516316dc165b60e01b81529051611002926001600160a01b03169133918d9184916316dc165b916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b871561105a5760075460408051632df467f160e21b8152905161105a926001600160a01b03169133918c91849163b7d19fc4916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b60408051338152602081018b9052908101899052606081018b90527f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca949060800160405180910390a1505050505050506110b36001600655565b915091565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906106f290829086906110f290879061344a565b61214b565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600760009054906101000a90046001600160a01b03166001600160a01b03166316dc165b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119d91906132a4565b6001600160a01b0316036111fa573487146111fa5760405162461bcd60e51b815260206004820152601960248201527f4e61746976653a20416d6f756e7473206e6f7420657175616c00000000000000604482015260640161024f565b60075460408051632df467f160e21b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693169163b7d19fc49160048083019260209291908290030181865afa158015611265573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128991906132a4565b6001600160a01b0316036112e6573486146112e65760405162461bcd60e51b815260206004820152601960248201527f4e61746976653a20416d6f756e7473206e6f7420657175616c00000000000000604482015260640161024f565b6112f03334612ac2565b6112fc878787876108dd565b9199909850909650945050505050565b611314612523565b604051627eeac760e11b8152306004820152602481018290526000906001600160a01b0384169062fdd58e90604401602060405180830381865afa158015611360573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138491906132e5565b6040517f0febdd4900000000000000000000000000000000000000000000000000000000815230600482015233602482015260448101849052606481018290529091506001600160a01b03841690630febdd4990608401600060405180830381600087803b1580156113f557600080fd5b505af1158015611409573d6000803e3d6000fd5b50505050505050565b61141a612523565b6114246000612b6d565b565b60008060008061143560025490565b600754604080516335a7476b60e21b81529051929350600092839261148b926001600160a01b0390911691829163d69d1dac91600480830192889291908290030181865afa158015610e27573d6000803e3d6000fd5b91509150600760009054906101000a90046001600160a01b03166001600160a01b0316633b6bc1a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150691906132e5565b611510908361344a565b9150600760009054906101000a90046001600160a01b03166001600160a01b0316637d3db0676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158991906132e5565b611593908261344a565b90508215806115a25750600082115b806115ad5750600081115b6115b9576115b961345d565b826000036115d8578794508693506115d18585612bcc565b95506116e8565b816000036115f857869350806115ee8486613314565b6115d19190613341565b8060000361160e57879450816115ee8487613314565b600061162c61161d838b613314565b611627858b613314565b612be4565b90506000811161167e5760405162461bcd60e51b815260206004820152600560248201527f63726f7373000000000000000000000000000000000000000000000000000000604482015260640161024f565b8161168a600183613437565b6116949190613341565b61169f90600161344a565b9550826116ad600183613437565b6116b79190613341565b6116c290600161344a565b945081836116d08684613314565b6116da9190613341565b6116e49190613341565b9650505b5050509250925092565b3360009081526020819052604090205461170b90610c23565b5050565b6060600480546106619061326a565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156117bb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161024f565b610810828686840361214b565b6000336106f2818585612336565b60008060006117e460025490565b9050806000036117fa5750600093849350915050565b600754604080516335a7476b60e21b81529051611848926001600160a01b031691829163d69d1dac916004808201926000929091908290030181865afa158015610e27573d6000803e3d6000fd5b600754604080517f3b6bc1a700000000000000000000000000000000000000000000000000000000815290519396509194506001600160a01b031691633b6bc1a7916004808201926020929091908290030181865afa1580156118af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d391906132e5565b6118dd908461344a565b9250600760009054906101000a90046001600160a01b03166001600160a01b0316637d3db0676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611932573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195691906132e5565b611960908361344a565b91508061196d8585613314565b6119779190613341565b9250806119848584613314565b61198e9190613341565b915050915091565b6000806119a161257d565b600083116119f15760405162461bcd60e51b815260206004820152601960248201527f5661756c743a206275726e2030206e6f7420616c6c6f77656400000000000000604482015260640161024f565b33600090815260208190526040902054831115611a0d57600080fd5b6000611a1860025490565b9050611a243385612746565b60008185600760009054906101000a90046001600160a01b03166001600160a01b0316633b6bc1a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9f91906132e5565b611aa99190613314565b611ab39190613341565b905060008286600760009054906101000a90046001600160a01b03166001600160a01b0316637d3db0676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3091906132e5565b611b3a9190613314565b611b449190613341565b600754604080516335a7476b60e21b815290519293506000928392611b9a926001600160a01b0390911691829163d69d1dac91600480830192889291908290030181865afa158015610e27573d6000803e3d6000fd5b915091506000806000841180611bb05750600083115b15611c615760008a6001611bcc8a670de0b6b3a7640000613314565b611bd69190613437565b611be09190613341565b611beb90600161344a565b600754604051639c8f9f2360e01b8152600481018390529192506001600160a01b031690639c8f9f239060240160408051808303816000875af1158015611c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5a91906132c1565b9093509150505b611c6b828761344a565b9850611c77818661344a565b97508815611e4957600754604080516316dc165b60e01b815290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169316916316dc165b9160048083019260209291908290030181865afa158015611cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0e91906132a4565b6001600160a01b031603611df757600754604080516316dc165b60e01b81529051611d6e926001600160a01b03169130918d9184916316dc165b916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b604051632e1a7d4d60e01b8152600481018a90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611dd057600080fd5b505af1158015611de4573d6000803e3d6000fd5b50505050611df2338a612bf3565b611e49565b600754604080516316dc165b60e01b81529051611e49926001600160a01b03169133918d9184916316dc165b916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b871561105a5760075460408051632df467f160e21b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693169163b7d19fc49160048083019260209291908290030181865afa158015611eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ede91906132a4565b6001600160a01b031603611fc75760075460408051632df467f160e21b81529051611f3e926001600160a01b03169130918c91849163b7d19fc4916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b604051632e1a7d4d60e01b8152600481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611fa057600080fd5b505af1158015611fb4573d6000803e3d6000fd5b50505050611fc23389612bf3565b61105a565b60075460408051632df467f160e21b8152905161105a926001600160a01b03169133918c91849163b7d19fc4916004808201926020929091908290030181865afa158015610b2e573d6000803e3d6000fd5b612021612523565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a591906132e5565b905061170b6001600160a01b0383163383612c96565b6120c3612523565b6001600160a01b03811661213f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161024f565b61214881612b6d565b50565b6001600160a01b0383166121c65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161024f565b6001600160a01b0382166122425760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161024f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461233057818110156123235760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161024f565b612330848484840361214b565b50505050565b6001600160a01b0383166123b25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161024f565b6001600160a01b03821661242e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161024f565b6001600160a01b038316600090815260208190526040902054818110156124bd5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161024f565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3612330565b6005546001600160a01b031633146114245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024f565b6002600654036125cf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161024f565b6002600655565b6040516001600160a01b03808516602483015283166044820152606481018290526123309085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612cdf565b6001600160a01b0382166126dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161024f565b80600260008282546126ef919061344a565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166127c25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161024f565b6001600160a01b038216600090815260208190526040902054818110156128515760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161024f565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612297565b505050565b60008060005b8451811015612ab95760006128df8683815181106128d2576128d2613473565b6020026020010151612dc4565b604051627eeac760e11b81526001600160a01b03898116600483015262ffffff8316602483015291925060009187169062fdd58e90604401602060405180830381865afa158015612934573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295891906132e5565b6040517f0abe968800000000000000000000000000000000000000000000000000000000815262ffffff8416600482015290915060009081906001600160a01b03891690630abe9688906024016040805180830381865afa1580156129c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e591906132c1565b6040517fbd85b03900000000000000000000000000000000000000000000000000000000815262ffffff8716600482015291935091506000906001600160a01b038a169063bd85b03990602401602060405180830381865afa158015612a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7391906132e5565b9050612a80848483612e0b565b612a8a908961344a565b9750612a97848383612e0b565b612aa1908861344a565b9650505050505080612ab290613489565b90506128b2565b50935093915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612b1d57600080fd5b505af1158015612b31573d6000803e3d6000fd5b5061170b9350506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915084905083612c96565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818311612bdb5781612bdd565b825b9392505050565b6000818310612bdb5781612bdd565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612c40576040519150601f19603f3d011682016040523d82523d6000602084013e612c45565b606091505b50509050806128a75760405162461bcd60e51b815260206004820181905260248201527f5661756c744e61746976653a204661696c656420746f2053656e642041564158604482015260640161024f565b6040516001600160a01b0383166024820152604481018290526128a79084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612623565b6000612d34826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e359092919063ffffffff16565b8051909150156128a75780806020019051810190612d5291906134a2565b6128a75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161024f565b8062ffffff81168114612e06576040517f76949f3c0000000000000000000000000000000000000000000000000000000081526004810183905260240161024f565b919050565b6000806000612e1a8686612e4c565b91509150612e2b8686868585612e6b565b9695505050505050565b6060612e448484600085612f3e565b949350505050565b6000806000198385098385029250828110838203039150509250929050565b600081600003612e8c57838381612e8457612e8461332b565b049050612f35565b838210612ecf576040517fcad6a856000000000000000000000000000000000000000000000000000000008152600481018390526024810185905260440161024f565b60008486880960018619810187169687900496600081900381900490910186831190950394850291909503949094049390931792505060026003840281188085028203028085028203028085028203028085028203028085028203028085029091030282025b95945050505050565b606082471015612fb65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161024f565b600080866001600160a01b03168587604051612fd291906134c4565b60006040518083038185875af1925050503d806000811461300f576040519150601f19603f3d011682016040523d82523d6000602084013e613014565b606091505b509150915061302587838387613030565b979650505050505050565b6060831561309f578251600003613098576001600160a01b0385163b6130985760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161024f565b5081612e44565b612e4483838151156130b45781518083602001fd5b8060405162461bcd60e51b815260040161024f91906130f2565b60005b838110156130e95781810151838201526020016130d1565b50506000910152565b60208152600082518060208401526131118160408501602087016130ce565b601f01601f19169190910160400192915050565b6001600160a01b038116811461214857600080fd5b6000806040838503121561314d57600080fd5b823561315881613125565b946020939093013593505050565b60008060006060848603121561317b57600080fd5b833561318681613125565b9250602084013561319681613125565b929592945050506040919091013590565b6000602082840312156131b957600080fd5b8135612bdd81613125565b600080600080608085870312156131da57600080fd5b5050823594602084013594506040840135936060013592509050565b60006020828403121561320857600080fd5b5035919050565b6000806040838503121561322257600080fd5b50508035926020909101359150565b6000806040838503121561324457600080fd5b823561324f81613125565b9150602083013561325f81613125565b809150509250929050565b600181811c9082168061327e57607f821691505b60208210810361329e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156132b657600080fd5b8151612bdd81613125565b600080604083850312156132d457600080fd5b505080516020909101519092909150565b6000602082840312156132f757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106f8576106f86132fe565b634e487b7160e01b600052601260045260246000fd5b60008261335e57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561338c57600080fd5b825167ffffffffffffffff808211156133a457600080fd5b818501915085601f8301126133b857600080fd5b8151818111156133ca576133ca613363565b8060051b604051601f19603f830116810181811085821117156133ef576133ef613363565b60405291825284820192508381018501918883111561340d57600080fd5b938501935b8285101561342b57845184529385019392850192613412565b98975050505050505050565b818103818111156106f8576106f86132fe565b808201808211156106f8576106f86132fe565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006001820161349b5761349b6132fe565b5060010190565b6000602082840312156134b457600080fd5b81518015158114612bdd57600080fd5b600082516134d68184602087016130ce565b919091019291505056fea26469706673582212206725d4575f90b8392d8803fa572988598d13832d8ba4d882aeb3275cb3b5e8c964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "calcSharesAndAmounts(uint256,uint256)": {
        "details": "Calculates the largest possible `amountx` and `amountY` such that they're in the same proportion as total amounts, but not greater than `amountXDesired` and `amountYDesired` respectively."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256,uint256,uint256,uint256)": {
        "params": {
          "amountX": "amount of tokenX to deposit",
          "amountXMin": "miniumum amount of tokenX to deposit incl. slippage",
          "amountY": "amount of tokenY to deposit",
          "amountYMin": "miniumum amount of tokenY to deposit incl. slippage"
        },
        "returns": {
          "amountXActual": "amount token X accepted as deposit",
          "amountYActual": "amount token Y accepted as deposit",
          "shares": "minted to the depoositor"
        }
      },
      "depositAVAXPair(uint256,uint256,uint256,uint256)": {
        "params": {
          "amountX": "amount of tokenX to deposit",
          "amountXMin": "miniumum amount of tokenX to deposit incl. slippage",
          "amountY": "amount of tokenY to deposit",
          "amountYMin": "miniumum amount of tokenY to deposit incl. slippage"
        },
        "returns": {
          "amountXActual": "amount token X accepted as deposit",
          "amountYActual": "amount token Y accepted as deposit",
          "shares": "minted to the depoositor"
        }
      },
      "getUnderlyingAssets(uint256)": {
        "params": {
          "_shares": "amount of shares"
        },
        "returns": {
          "totalX": "amounts of tokenX",
          "totalY": "amounts of tokenY"
        }
      },
      "inCaseLBTokensGetStuck(address,uint256)": {
        "params": {
          "_id": "id of the token to rescue.",
          "_lbToken": "address of the token to rescue."
        }
      },
      "inCaseTokensGetStuck(address)": {
        "params": {
          "_token": "address of the token to rescue."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setStrategyAddress(address)": {
        "params": {
          "_strategy": "address of the proposed new strategy."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "want()": {
        "returns": {
          "_0": "tokenX address of first token",
          "_1": "tokenY address of second token"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_shares": "amount of shares to withdraw from the system"
        },
        "returns": {
          "amountX": "the amount of token X removed",
          "amountY": "the amount of token Y removed"
        }
      },
      "withdrawAVAXPair(uint256)": {
        "params": {
          "_shares": "amount of shares to withdraw from the system"
        },
        "returns": {
          "amountX": "the amount of token X removed",
          "amountY": "the amount of token Y removed"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Math512Bits__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Math512Bits errors "
        }
      ]
    },
    "events": {
      "UpgradeStrat(address)": {
        "notice": "----------------------------------------------------------- Events -----------------------------------------------------------"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "----------------------------------------------------------- Constructor -----------------------------------------------------------"
      },
      "deposit(uint256,uint256,uint256,uint256)": {
        "notice": "primary entrypoint of funds into the system. users deposit with this function into the vault. The vault is then in charge of sending funds into the strategy. funds stay idle in the strategy until earn() is called on the strategy and valid parametersDeposits tokens in proportion to the vault's current holdings."
      },
      "depositAVAXPair(uint256,uint256,uint256,uint256)": {
        "notice": "Alternative entry point into the strat. You can send native AVAX, and the vault will wrap them before depositing them into the strat.Deposits tokens in proportion to the vault's current holdings."
      },
      "getUnderlyingAssets(uint256)": {
        "notice": "Gets the underlying assets in the vault i.e tokenX and tokenY includes all tokenX and tokenY idle in the strategy and supplied as liquidity"
      },
      "inCaseLBTokensGetStuck(address,uint256)": {
        "notice": "Rescues LB tokens funds stuck"
      },
      "inCaseTokensGetStuck(address)": {
        "notice": "Rescues funds stuck"
      },
      "setStrategyAddress(address)": {
        "notice": "Allows the vaults underlying strategy to be swapped out after first deploy"
      },
      "want()": {
        "notice": "returns the input tokens that may be deposited to this vault"
      },
      "withdraw(uint256)": {
        "notice": "primary exit point of funds from the system. users withdraw using this function."
      },
      "withdrawAVAXPair(uint256)": {
        "notice": "alternative exitpoint of native funds from the system. People withdraw from this function."
      },
      "withdrawAll()": {
        "notice": "a helper which will withdraw all of the users shares from the vault"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 348,
        "contract": "contracts/vault/LBVaultNative.sol:LBVaultV1Native",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 354,
        "contract": "contracts/vault/LBVaultNative.sol:LBVaultV1Native",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 356,
        "contract": "contracts/vault/LBVaultNative.sol:LBVaultV1Native",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 358,
        "contract": "contracts/vault/LBVaultNative.sol:LBVaultV1Native",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 360,
        "contract": "contracts/vault/LBVaultNative.sol:LBVaultV1Native",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/vault/LBVaultNative.sol:LBVaultV1Native",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 289,
        "contract": "contracts/vault/LBVaultNative.sol:LBVaultV1Native",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10492,
        "contract": "contracts/vault/LBVaultNative.sol:LBVaultV1Native",
        "label": "strategy",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ILBStrategy)8584"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ILBStrategy)8584": {
        "encoding": "inplace",
        "label": "contract ILBStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}